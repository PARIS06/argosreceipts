{"ast":null,"code":"var _jsxFileName = \"/Users/moabdo-business/Desktop/argoswebapp/web/src/Components/Authorization/Register/Form.js\";\nimport React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\n\nconst InnerForm = props => {\n  const {\n    errors,\n    touched\n  } = props;\n  return React.createElement(Form, {\n    className: \"register-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"email\",\n    className: \"form-control login-input\",\n    name: \"email\",\n    placeholder: \"Enter a valid email...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }), touched.email && errors.email && React.createElement(\"p\", {\n    className: \"field-invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, errors.email)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"password\",\n    className: \"form-control password-input\",\n    name: \"password\",\n    placeholder: \"Set a password...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), touched.password && errors.password && React.createElement(\"p\", {\n    className: \"field-invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, errors.password)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"select\",\n    className: \"form-control\",\n    name: \"user_type\",\n    placeholder: \"Select account type\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), touched.password && errors.password && React.createElement(\"p\", {\n    className: \"field-invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, errors.password)), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Already have an account?\"))), React.createElement(SingleModuleButton, {\n    text: \"Create your account\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }));\n}; // Wrap our form with the using withFormik HoC\n\n\nconst RegisterForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({\n    email: '',\n    password: '',\n    user_type: ''\n  }),\n  // Add a custom validation function (this can be async too!)\n  validationSchema: Yup.object().shape({\n    email: Yup.string().required('Email is required').email('This is not a valid email'),\n    password: Yup.string().required('Password is required').min(6, 'Your password has to be at least 6 characters')\n  }),\n  // Submission handler\n  handleSubmit: (values, {\n    props,\n    setStatus\n  }) => {\n    props.onRegisterSubmit(values.email, values.password, values.user_type);\n  }\n})(InnerForm);\nexport default RegisterForm;","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Components/Authorization/Register/Form.js"],"names":["React","Form","Field","withFormik","Link","Yup","SingleModuleButton","InnerForm","props","errors","touched","email","password","RegisterForm","mapPropsToValues","user_type","validationSchema","object","shape","string","required","min","handleSubmit","values","setStatus","onRegisterSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\n\nconst InnerForm = props => {\n   const { errors, touched } = props;\n\n   return (\n      <Form className=\"register-form\">\n         <div>\n         <div className=\"form-group\">\n               <Field\n                  type=\"email\"\n                  className=\"form-control login-input\"\n                  name=\"email\"\n                  placeholder=\"Enter a valid email...\"\n               />\n               {touched.email && errors.email && <p className=\"field-invalid\">{errors.email}</p>}\n            </div>\n\n            <div className=\"form-group\">\n               <Field\n                  type=\"password\"\n                  className=\"form-control password-input\"\n                  name=\"password\"\n                  placeholder=\"Set a password...\"\n               />\n               {touched.password && errors.password && (\n                  <p className=\"field-invalid\">{errors.password}</p>\n               )}\n            </div>\n            <div className=\"form-group\">\n               <Field\n                  type=\"select\"\n                  className=\"form-control\"\n                  name=\"user_type\"\n                  placeholder=\"Select account type\"\n               />\n               {touched.password && errors.password && (\n                  <p className=\"field-invalid\">{errors.password}</p>\n               )}\n            </div>\n            <p>\n               <Link to=\"/login\">Already have an account?</Link>\n            </p>\n         </div>\n\n         <SingleModuleButton text=\"Create your account\" type=\"submit\" />\n      </Form>\n   );\n};\n\n// Wrap our form with the using withFormik HoC\nconst RegisterForm = withFormik({\n   // Transform outer props into form values\n   mapPropsToValues: props => ({ email: '', password: '', user_type: '' }),\n\n   // Add a custom validation function (this can be async too!)\n   validationSchema: Yup.object().shape({\n      email: Yup.string()\n         .required('Email is required')\n         .email('This is not a valid email'),\n      password: Yup.string()\n         .required('Password is required')\n         .min(6, 'Your password has to be at least 6 characters')\n   }),\n\n   // Submission handler\n   handleSubmit: (values, { props, setStatus }) => {\n      props.onRegisterSubmit(values.email, values.password, values.user_type);\n   }\n})(InnerForm);\n\nexport default RegisterForm;\n"]},"metadata":{},"sourceType":"module"}