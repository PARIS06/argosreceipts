{"ast":null,"code":"var _jsxFileName = \"/Users/moabdo-business/Desktop/argoswebapp/web/src/Components/Receipts/New/Form.js\";\nimport React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\nimport validations from './validations';\n\nconst InnerForm = props => {\n  const {\n    errors,\n    touched\n  } = props;\n  return React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"source-account\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"Choose your account\"), React.createElement(Field, {\n    component: \"select\",\n    className: \"form-control\",\n    id: \"source-account\",\n    name: \"sourceAccountId\",\n    placeholder: \"Your new email...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, props.userAccountsList), touched.sourceAccountId && errors.sourceAccountId && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, errors.sourceAccountId)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"payee-acc-number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"Recipient's account number\"), React.createElement(Field, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"payee-acc-number\",\n    name: \"payeeAccNumber\",\n    maxLength: \"8\",\n    placeholder: \"Recipient's account number...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), touched.payeeAccNumber && errors.payeeAccNumber && React.createElement(\"p\", {\n    className: \"field-invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, errors.payeeAccNumber)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"payee-sort-code\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Recipient's sort code\"), React.createElement(Field, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"payee-sort-code\",\n    name: \"payeeSortcode\",\n    maxLength: \"6\",\n    placeholder: \"Recipient's sort code...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), touched.payeeSortcode && errors.payeeSortcode && React.createElement(\"p\", {\n    className: \"field-invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, errors.payeeSortcode)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"payee-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Recipient's name\"), React.createElement(Field, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"payee-name\",\n    name: \"payeeName\",\n    placeholder: \"Recipient's name...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), touched.payeeName && errors.payeeName && React.createElement(\"p\", {\n    className: \"field-invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, errors.payeeName)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"payee-address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Recipient's address\"), React.createElement(Field, {\n    component: \"textarea\",\n    className: \"form-control\",\n    id: \"payee-address\",\n    name: \"payeeAddress\",\n    rows: \"4\",\n    placeholder: \"Recipient's address...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), touched.payeeAddress && errors.payeeAddress && React.createElement(\"p\", {\n    className: \"field-invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, errors.payeeAddress)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"reference\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Reference\"), React.createElement(Field, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"reference\",\n    name: \"reference\",\n    maxLength: \"50\",\n    placeholder: \"Reference...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), touched.reference && errors.reference && React.createElement(\"p\", {\n    className: \"field-invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, errors.reference)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"amount\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Amount\"), React.createElement(Field, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"amount\",\n    name: \"amount\",\n    placeholder: \"Amount...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), touched.amount && errors.amount && React.createElement(\"p\", {\n    className: \"field-invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, errors.amount)), React.createElement(\"p\", {\n    className: \"validation-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, props.status)), React.createElement(SingleModuleButton, {\n    text: \"Confirm transfer\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }));\n}; // Wrap our form with the using withFormik HoC\n\n\nconst NewTransferForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({\n    sourceAccountId: props.firstAccId,\n    payeeAccNumber: '',\n    payeeSortcode: '',\n    payeeName: '',\n    payeeAddress: '',\n    reference: '',\n    amount: ''\n  }),\n  validationSchema: validations,\n  // Submission handler\n  handleSubmit: (values, {\n    props,\n    setStatus\n  }) => {\n    // Prepare some data for API\n    const data = { ...values,\n      sender: props.userId,\n      recipient: props.userId\n    };\n    setStatus('Sending...');\n    props.addTransfer(data).then(data => setStatus('Transfer done!')).catch(error => setStatus('Problems, try again...'));\n  }\n})(InnerForm);\nexport default NewTransferForm;","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Components/Receipts/New/Form.js"],"names":["React","Form","Field","withFormik","SingleModuleButton","validations","InnerForm","props","errors","touched","userAccountsList","sourceAccountId","payeeAccNumber","payeeSortcode","payeeName","payeeAddress","reference","amount","status","NewTransferForm","mapPropsToValues","firstAccId","validationSchema","handleSubmit","values","setStatus","data","sender","userId","recipient","addTransfer","then","catch","error"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\nimport validations from './validations';\n\nconst InnerForm = props => {\n   const { errors, touched } = props;\n\n   return (\n      <Form>\n         <div>\n            <div className=\"form-group\">\n               <label htmlFor=\"source-account\">Choose your account</label>\n               <Field\n                  component=\"select\"\n                  className=\"form-control\"\n                  id=\"source-account\"\n                  name=\"sourceAccountId\"\n                  placeholder=\"Your new email...\"\n               >\n                  {props.userAccountsList}\n               </Field>\n               {touched.sourceAccountId && errors.sourceAccountId && (\n                  <p>{errors.sourceAccountId}</p>\n               )}\n            </div>\n\n            <div className=\"form-group\">\n               <label htmlFor=\"payee-acc-number\">Recipient's account number</label>\n\n               <Field\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"payee-acc-number\"\n                  name=\"payeeAccNumber\"\n                  maxLength=\"8\"\n                  placeholder=\"Recipient's account number...\"\n               />\n               {touched.payeeAccNumber && errors.payeeAccNumber && (\n                  <p className=\"field-invalid\">{errors.payeeAccNumber}</p>\n               )}\n            </div>\n\n            <div className=\"form-group\">\n               <label htmlFor=\"payee-sort-code\">Recipient's sort code</label>\n\n               <Field\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"payee-sort-code\"\n                  name=\"payeeSortcode\"\n                  maxLength=\"6\"\n                  placeholder=\"Recipient's sort code...\"\n               />\n               {touched.payeeSortcode && errors.payeeSortcode && (\n                  <p className=\"field-invalid\">{errors.payeeSortcode}</p>\n               )}\n            </div>\n\n            <div className=\"form-group\">\n               <label htmlFor=\"payee-name\">Recipient's name</label>\n\n               <Field\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"payee-name\"\n                  name=\"payeeName\"\n                  placeholder=\"Recipient's name...\"\n               />\n               {touched.payeeName && errors.payeeName && (\n                  <p className=\"field-invalid\">{errors.payeeName}</p>\n               )}\n            </div>\n\n            <div className=\"form-group\">\n               <label htmlFor=\"payee-address\">Recipient's address</label>\n\n               <Field\n                  component=\"textarea\"\n                  className=\"form-control\"\n                  id=\"payee-address\"\n                  name=\"payeeAddress\"\n                  rows=\"4\"\n                  placeholder=\"Recipient's address...\"\n               />\n               {touched.payeeAddress && errors.payeeAddress && (\n                  <p className=\"field-invalid\">{errors.payeeAddress}</p>\n               )}\n            </div>\n\n            <div className=\"form-group\">\n               <label htmlFor=\"reference\">Reference</label>\n\n               <Field\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"reference\"\n                  name=\"reference\"\n                  maxLength=\"50\"\n                  placeholder=\"Reference...\"\n               />\n               {touched.reference && errors.reference && (\n                  <p className=\"field-invalid\">{errors.reference}</p>\n               )}\n            </div>\n\n            <div className=\"form-group\">\n               <label htmlFor=\"amount\">Amount</label>\n\n               <Field\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"amount\"\n                  name=\"amount\"\n                  placeholder=\"Amount...\"\n               />\n               {touched.amount && errors.amount && <p className=\"field-invalid\">{errors.amount}</p>}\n            </div>\n\n            <p className=\"validation-info\">{props.status}</p>\n         </div>\n\n         <SingleModuleButton text=\"Confirm transfer\" type=\"submit\" />\n      </Form>\n   );\n};\n\n// Wrap our form with the using withFormik HoC\nconst NewTransferForm = withFormik({\n   // Transform outer props into form values\n   mapPropsToValues: props => ({\n      sourceAccountId: props.firstAccId,\n      payeeAccNumber: '',\n      payeeSortcode: '',\n      payeeName: '',\n      payeeAddress: '',\n      reference: '',\n      amount: ''\n   }),\n\n   validationSchema: validations,\n\n   // Submission handler\n   handleSubmit: (values, { props, setStatus }) => {\n      // Prepare some data for API\n      const data = {\n         ...values,\n         sender: props.userId,\n         recipient: props.userId\n      };\n\n      setStatus('Sending...');\n\n      props\n         .addTransfer(data)\n         .then(data => setStatus('Transfer done!'))\n         .catch(error => setStatus('Problems, try again...'));\n   }\n})(InnerForm);\n\nexport default NewTransferForm;\n"]},"metadata":{},"sourceType":"module"}