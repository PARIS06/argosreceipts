{"ast":null,"code":"// import React, { Component } from 'react';\n// import { connect } from 'react-redux';\n// import * as Actions from '../../../store/Actions';\n// import withAuth from '../../../hoc/WithAuth';\n// import Input from '../../../components/UI/FormBoxes/Input/Input';\n// import SingleModuleButton from '../../../components/UI/Buttons/SingleModuleButton';\n// import RegisterBox from '../../../components/Authorization/Register';\n// class Register extends Component {\n//    state = {\n//       controls: {\n//          firstName: {\n//             elementType: 'input',\n//             elementConfig: {\n//                 type: 'text',\n//                 placeholder: 'Enter your first name'\n//             },\n//             value: '',\n//             validation: {\n//                 required: true,\n//                 minLength: 5,\n//                 maxLength: 255\n//             },\n//             valid: false,\n//             touched: false\n//         },\n//         lastName: {\n//             elementType: 'input',\n//             elementConfig: {\n//                type: 'text',\n//                placeholder: 'Enter your last name'\n//             },\n//             value: '',\n//             validation: {\n//                required: true,\n//                minLength: 5,\n//                maxLength: 255\n//             },\n//             valid: false,\n//             touched: false\n//          },\n//          email: {\n//             elementType: 'input',\n//             elementConfig: {\n//                type: 'email',\n//                placeholder: 'Enter your email address'\n//             },\n//             value: '',\n//             validation: {\n//                required: true,\n//                isEmail: true\n//             },\n//             valid: false,\n//             touched: false\n//          },\n//          password: {\n//             elementType: 'input',\n//             elementConfig: {\n//                type: 'password',\n//                placeholder: 'Enter your password'\n//             },\n//             value: '',\n//             validation: {\n//                required: true,\n//                minLength: 6\n//             },\n//             valid: false,\n//             touched: false\n//          },\n//       },\n//       loading: false,\n//       error: null\n//    };\n//   checkValidation(value, rules) {\n//       let isValid = true;\n//       if (rules.required) {\n//           isValid = value.trim() !=='' && isValid;\n//       }\n//       if (rules.minLength) {\n//           isValid = value.length >= rules.minLength && isValid\n//       }\n//       if (rules.maxLength) {\n//           isValid = value.length <= rules.maxLength && isValid\n//       }\n//       if (rules.isEmail) {\n//          const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n//          isValid = pattern.test(value) && isValid\n//       }\n//      if (rules.isNumeric) {\n//          const pattern = /^\\d+$/;\n//          isValid = pattern.test(value) && isValid\n//       }\n//       return isValid;\n//   }\n//   inputChangedHandler = (event, controlName) => {\n//       const updatedControls = {\n//          ...this.state.controls,\n//          [controlName]: {\n//             ...this.state.controls[controlName],\n//             value: event.target.value,\n//             valid: this.checkValidation(event.target.value, this.state.controls[controlName].validation),\n//             touched: true\n//          }\n//       };\n//       this.setState({controls: updatedControls});\n//   }\n//    render() {\n//       const formElementsArray = []\n//       for (let key in this.state.controls) {\n//           formElementsArray.push({\n//               id: key,\n//               config: this.state.controls[key]\n//           });\n//       }\n//       const form = formElementsArray.map(formElement => (\n//          <Input\n//             key={formElement.id}\n//             elementType={formElement.config.elementType}\n//             elementConfig={formElement.config.elementConfig}\n//             value={formElement.config.value} \n//             changed={(event) => this.inputChangedHandler(event, formElement.id)}\n//             invalid={!formElement.config.valid}\n//             touched={formElement.config.touched}\n//          />\n//       ));\n//       return (\n//          <div className=\"row\">\n//             <div className=\"col\">\n//                <RegisterBox\n//                   history={this.props.history}\n//                   onSubmit={this.onRegisterSubmit}\n//                   loading={this.state.loading}\n//                   error={this.state.error}\n//                > \n//                      {form}\n//                      <SingleModuleButton \n//          text=\"Create your account\" \n//          type=\"submit\" \n//       />\n//                </RegisterBox>\n//             </div>\n//          </div>\n//       );\n//    }\n//    onRegisterSubmit = (event) => {\n//       event.preventDefault();\n//       this.setState({ loading: true, error: null });\n//       // Dispatch auth action\n//       // There will be automatic redirect to panel, in HOC\n//       this.props\n//          .register(this.state.controls.email.value, this.state.controls.password, this.state.controls.firstName.value, this.state.controls.lastName.value)\n//          .catch(error => this.setState({ loading: false, error }));\n//    };\n// }\n// const mapDispatchToProps = dispatch => {\n//    return {\n//       register: (firstName, lastName, email, password, user_type) => dispatch(Actions.register(firstName, lastName, email, password, user_type))\n//    };\n// };\n// export default connect(null, mapDispatchToProps)(Register);","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/containers/Authorization/Register/index.js"],"names":[],"mappingssourcesContent":["// import React, { Component } from 'react';\n// import { connect } from 'react-redux';\n// import * as Actions from '../../../store/Actions';\n// import withAuth from '../../../hoc/WithAuth';\n// import Input from '../../../components/UI/FormBoxes/Input/Input';\n// import SingleModuleButton from '../../../components/UI/Buttons/SingleModuleButton';\n\n// import RegisterBox from '../../../components/Authorization/Register';\n\n// class Register extends Component {\n//    state = {\n//       controls: {\n//          firstName: {\n//             elementType: 'input',\n//             elementConfig: {\n//                 type: 'text',\n//                 placeholder: 'Enter your first name'\n//             },\n//             value: '',\n//             validation: {\n//                 required: true,\n//                 minLength: 5,\n//                 maxLength: 255\n//             },\n//             valid: false,\n//             touched: false\n//         },\n//         lastName: {\n//             elementType: 'input',\n//             elementConfig: {\n//                type: 'text',\n//                placeholder: 'Enter your last name'\n//             },\n//             value: '',\n//             validation: {\n//                required: true,\n//                minLength: 5,\n//                maxLength: 255\n//             },\n//             valid: false,\n//             touched: false\n//          },\n//          email: {\n//             elementType: 'input',\n//             elementConfig: {\n//                type: 'email',\n//                placeholder: 'Enter your email address'\n//             },\n//             value: '',\n//             validation: {\n//                required: true,\n//                isEmail: true\n//             },\n//             valid: false,\n//             touched: false\n//          },\n//          password: {\n//             elementType: 'input',\n//             elementConfig: {\n//                type: 'password',\n//                placeholder: 'Enter your password'\n//             },\n//             value: '',\n//             validation: {\n//                required: true,\n//                minLength: 6\n//             },\n//             valid: false,\n//             touched: false\n//          },\n//       },\n//       loading: false,\n//       error: null\n//    };\n\n\n//   checkValidation(value, rules) {\n//       let isValid = true;\n//       if (rules.required) {\n//           isValid = value.trim() !=='' && isValid;\n//       }\n//       if (rules.minLength) {\n//           isValid = value.length >= rules.minLength && isValid\n//       }\n//       if (rules.maxLength) {\n//           isValid = value.length <= rules.maxLength && isValid\n//       }\n//       if (rules.isEmail) {\n//          const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n//          isValid = pattern.test(value) && isValid\n//       }\n//      if (rules.isNumeric) {\n//          const pattern = /^\\d+$/;\n//          isValid = pattern.test(value) && isValid\n//       }\n//       return isValid;\n//   }\n\n//   inputChangedHandler = (event, controlName) => {\n//       const updatedControls = {\n//          ...this.state.controls,\n//          [controlName]: {\n//             ...this.state.controls[controlName],\n//             value: event.target.value,\n//             valid: this.checkValidation(event.target.value, this.state.controls[controlName].validation),\n//             touched: true\n//          }\n//       };\n//       this.setState({controls: updatedControls});\n//   }\n\n//    render() {\n//       const formElementsArray = []\n//       for (let key in this.state.controls) {\n//           formElementsArray.push({\n//               id: key,\n//               config: this.state.controls[key]\n//           });\n//       }\n\n//       const form = formElementsArray.map(formElement => (\n//          <Input\n//             key={formElement.id}\n//             elementType={formElement.config.elementType}\n//             elementConfig={formElement.config.elementConfig}\n//             value={formElement.config.value} \n//             changed={(event) => this.inputChangedHandler(event, formElement.id)}\n//             invalid={!formElement.config.valid}\n//             touched={formElement.config.touched}\n//          />\n//       ));\n      \n//       return (\n//          <div className=\"row\">\n//             <div className=\"col\">\n//                <RegisterBox\n//                   history={this.props.history}\n//                   onSubmit={this.onRegisterSubmit}\n//                   loading={this.state.loading}\n//                   error={this.state.error}\n//                > \n//                      {form}\n//                      <SingleModuleButton \n//          text=\"Create your account\" \n//          type=\"submit\" \n//       />\n//                </RegisterBox>\n               \n              \n//             </div>\n//          </div>\n//       );\n//    }\n\n//    onRegisterSubmit = (event) => {\n//       event.preventDefault();\n//       this.setState({ loading: true, error: null });\n\n//       // Dispatch auth action\n//       // There will be automatic redirect to panel, in HOC\n//       this.props\n//          .register(this.state.controls.email.value, this.state.controls.password, this.state.controls.firstName.value, this.state.controls.lastName.value)\n//          .catch(error => this.setState({ loading: false, error }));\n//    };\n// }\n\n// const mapDispatchToProps = dispatch => {\n//    return {\n//       register: (firstName, lastName, email, password, user_type) => dispatch(Actions.register(firstName, lastName, email, password, user_type))\n//    };\n// };\n\n\n// export default connect(null, mapDispatchToProps)(Register);\n"]},"metadata":{},"sourceType":"module"}