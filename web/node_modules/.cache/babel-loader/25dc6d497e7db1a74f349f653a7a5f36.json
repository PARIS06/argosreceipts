{"ast":null,"code":"var _jsxFileName = \"/Users/moabdo-business/Desktop/argoswebapp/web/src/components/Receipts/SingleReceipt/Barcode/Barcode.js\";\nimport React, { Component } from 'react';\nimport JsBarcode from 'jsbarcode'; // import PropTypes from 'prop-types';\n\nvar getDOMNode; // Super naive semver detection but it's good enough. We support 0.12, 0.13\n// which both have getDOMNode on the ref. 0.14 and 15 make the DOM node the ref.\n\nvar version = React.version.split(/[.-]/);\n\nif (version[0] === '0' && (version[1] === '13' || version[1] === '12')) {\n  getDOMNode = ref => ref.getDOMNode();\n} else {\n  getDOMNode = ref => ref;\n}\n\nclass Barcode extends Component {\n  constructor(props) {\n    super(props);\n    this.update = this.update.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return Object.keys(Barcode.propTypes).some(k => this.props[k] !== nextProps[k]);\n  }\n\n  componentDidMount() {\n    this.update();\n  }\n\n  componentDidUpdate() {\n    this.update();\n  }\n\n  update() {\n    var renderElement = getDOMNode(this.refs.renderElement);\n\n    try {\n      new JsBarcode(renderElement, this.props.value, Object.assign({}, this.props));\n    } catch (e) {\n      // prevent stop the parent process\n      window.console.error(e);\n    }\n  }\n\n  render() {\n    if (this.props.renderer === 'svg') {\n      return React.createElement(\"svg\", {\n        ref: \"renderElement\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      });\n    } else if (this.props.renderer === 'canvas') {\n      return React.createElement(\"canvas\", {\n        ref: \"renderElement\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      });\n    } else if (this.props.renderer === 'img') {\n      return React.createElement(\"img\", {\n        className: \"barcode\",\n        alt: \"barcode\",\n        ref: \"renderElement\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      });\n    }\n  }\n\n} // Barcode.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   renderer: PropTypes.string,\n//   format: PropTypes.string,\n//   width: PropTypes.number,\n//   height: PropTypes.number,\n//   displayValue: PropTypes.bool,\n//   fontOptions: PropTypes.string,\n//   font: PropTypes.string,\n//   textAlign: PropTypes.string,\n//   textPosition: PropTypes.string,\n//   textMargin: PropTypes.number,\n//   fontSize: PropTypes.number,\n//   background: PropTypes.string,\n//   lineColor: PropTypes.string,\n//   margin: PropTypes.number,\n//   marginTop: PropTypes.number,\n//   marginBottom: PropTypes.number,\n//   marginLeft: PropTypes.number,\n//   marginRight: PropTypes.number,\n// };\n// Barcode.defaultProps = {\n//   format: 'CODE128',\n//   renderer: 'svg',\n//   width: 0.9,\n//   height: 65,\n//   displayValue: true,\n//   fontOptions: '',\n//   font: 'monospace',\n//   textAlign: 'center',\n//   textPosition: 'bottom',\n//   textMargin: 2,\n//   fontSize: 20,\n//   background: '',\n//   lineColor: '#000000',\n//   margin: 50,\n// };\n\n\nexport default Barcode;","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/components/Receipts/SingleReceipt/Barcode/Barcode.js"],"names":["React","Component","JsBarcode","getDOMNode","version","split","ref","Barcode","constructor","props","update","bind","shouldComponentUpdate","nextProps","Object","keys","propTypes","some","k","componentDidMount","componentDidUpdate","renderElement","refs","value","assign","e","window","console","error","render","renderer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CACA;;AAEA,IAAIC,UAAJ,C,CACA;AACA;;AACA,IAAIC,OAAO,GAAGJ,KAAK,CAACI,OAAN,CAAcC,KAAd,CAAoB,MAApB,CAAd;;AACA,IAAID,OAAO,CAAC,CAAD,CAAP,KAAe,GAAf,KAAuBA,OAAO,CAAC,CAAD,CAAP,KAAe,IAAf,IAAuBA,OAAO,CAAC,CAAD,CAAP,KAAe,IAA7D,CAAJ,EAAwE;AACtED,EAAAA,UAAU,GAAIG,GAAD,IAASA,GAAG,CAACH,UAAJ,EAAtB;AACD,CAFD,MAEO;AACLA,EAAAA,UAAU,GAAIG,GAAD,IAASA,GAAtB;AACD;;AAED,MAAMC,OAAN,SAAsBN,SAAtB,CAAgC;AAC9BO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AACD;;AAEDC,EAAAA,qBAAqB,CAACC,SAAD,EAAY;AAC/B,WAAOC,MAAM,CAACC,IAAP,CAAYR,OAAO,CAACS,SAApB,EAA+BC,IAA/B,CAAqCC,CAAD,IAAO,KAAKT,KAAL,CAAWS,CAAX,MAAkBL,SAAS,CAACK,CAAD,CAAtE,CAAP;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKT,MAAL;AACD;;AAEDU,EAAAA,kBAAkB,GAAG;AACnB,SAAKV,MAAL;AACD;;AAEDA,EAAAA,MAAM,GAAG;AACP,QAAIW,aAAa,GAAGlB,UAAU,CAAC,KAAKmB,IAAL,CAAUD,aAAX,CAA9B;;AACA,QAAI;AACF,UAAInB,SAAJ,CAAcmB,aAAd,EAA6B,KAAKZ,KAAL,CAAWc,KAAxC,EAA+CT,MAAM,CAACU,MAAP,CAAc,EAAd,EAAkB,KAAKf,KAAvB,CAA/C;AACD,KAFD,CAEE,OAAOgB,CAAP,EAAU;AACV;AACAC,MAAAA,MAAM,CAACC,OAAP,CAAeC,KAAf,CAAqBH,CAArB;AACD;AACF;;AAEDI,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKpB,KAAL,CAAWqB,QAAX,KAAwB,KAA5B,EAAmC;AACjC,aACE;AAAK,QAAA,GAAG,EAAC,eAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD,KAJD,MAIO,IAAI,KAAKrB,KAAL,CAAWqB,QAAX,KAAwB,QAA5B,EAAsC;AAC3C,aACE;AAAQ,QAAA,GAAG,EAAC,eAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD,KAJM,MAIA,IAAI,KAAKrB,KAAL,CAAWqB,QAAX,KAAwB,KAA5B,EAAmC;AACxC,aACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAyB,QAAA,GAAG,EAAC,SAA7B;AAAuC,QAAA,GAAG,EAAC,eAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;AACF;;AA1C6B,C,CA6ChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAevB,OAAf","sourcesContent":["import React, { Component } from 'react';\nimport JsBarcode from 'jsbarcode';\n// import PropTypes from 'prop-types';\n\nvar getDOMNode;\n// Super naive semver detection but it's good enough. We support 0.12, 0.13\n// which both have getDOMNode on the ref. 0.14 and 15 make the DOM node the ref.\nvar version = React.version.split(/[.-]/);\nif (version[0] === '0' && (version[1] === '13' || version[1] === '12')) {\n  getDOMNode = (ref) => ref.getDOMNode();\n} else {\n  getDOMNode = (ref) => ref;\n}\n\nclass Barcode extends Component {\n  constructor(props) {\n    super(props);\n    this.update = this.update.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return Object.keys(Barcode.propTypes).some((k) => this.props[k] !== nextProps[k]);\n  }\n\n  componentDidMount() {\n    this.update();\n  }\n\n  componentDidUpdate() {\n    this.update();\n  }\n\n  update() {\n    var renderElement = getDOMNode(this.refs.renderElement);\n    try {\n      new JsBarcode(renderElement, this.props.value, Object.assign({}, this.props));\n    } catch (e) {\n      // prevent stop the parent process\n      window.console.error(e);\n    }\n  }\n\n  render() {\n    if (this.props.renderer === 'svg') {\n      return (\n        <svg ref=\"renderElement\" />\n      );\n    } else if (this.props.renderer === 'canvas') {\n      return (\n        <canvas ref=\"renderElement\" />\n      );\n    } else if (this.props.renderer === 'img') {\n      return (\n        <img className=\"barcode\" alt=\"barcode\" ref=\"renderElement\" />\n      );\n    }\n  }\n}\n\n// Barcode.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   renderer: PropTypes.string,\n//   format: PropTypes.string,\n//   width: PropTypes.number,\n//   height: PropTypes.number,\n//   displayValue: PropTypes.bool,\n//   fontOptions: PropTypes.string,\n//   font: PropTypes.string,\n//   textAlign: PropTypes.string,\n//   textPosition: PropTypes.string,\n//   textMargin: PropTypes.number,\n//   fontSize: PropTypes.number,\n//   background: PropTypes.string,\n//   lineColor: PropTypes.string,\n//   margin: PropTypes.number,\n//   marginTop: PropTypes.number,\n//   marginBottom: PropTypes.number,\n//   marginLeft: PropTypes.number,\n//   marginRight: PropTypes.number,\n// };\n\n// Barcode.defaultProps = {\n//   format: 'CODE128',\n//   renderer: 'svg',\n//   width: 0.9,\n//   height: 65,\n//   displayValue: true,\n//   fontOptions: '',\n//   font: 'monospace',\n//   textAlign: 'center',\n//   textPosition: 'bottom',\n//   textMargin: 2,\n//   fontSize: 20,\n//   background: '',\n//   lineColor: '#000000',\n//   margin: 50,\n// };\n\nexport default Barcode;"]},"metadata":{},"sourceType":"module"}