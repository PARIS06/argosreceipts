{"ast":null,"code":"// import React from 'react';\n// import { Form, Field, withFormik } from 'formik';\n// import * as Yup from 'yup';\n// import '../../../Tools/validations/YupCustomValidations';\n// import SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\n// const InnerForm = props => {\n//    const { errors, touched } = props;\n//    return (\n//       <Form>\n//          <div>\n//             <div className=\"form-group\">\n//                <label htmlFor=\"pin\">Enter new PIN</label>\n//                <Field\n//                   type=\"text\"\n//                   id=\"pin\"\n//                   className=\"form-control\"\n//                   name=\"pin\"\n//                   maxLength=\"4\"\n//                   placeholder=\"Enter new PIN...\"\n//                />\n//                {touched.pin && errors.pin && <p className=\"field-invalid\">{errors.pin}</p>}\n//             </div>\n//             <div className=\"form-group\">\n//                <label htmlFor=\"pin-conf\">Confirm new PIN</label>\n//                <Field\n//                   type=\"text\"\n//                   id=\"pin-conf\"\n//                   className=\"form-control\"\n//                   name=\"pinConf\"\n//                   maxLength=\"4\"\n//                   placeholder=\"Confirm new PIN...\"\n//                />\n//                {touched.pinConf && errors.pinConf && (\n//                   <p className=\"field-invalid\">{errors.pinConf}</p>\n//                )}\n//             </div>\n//             <p className=\"validation-info\">{props.status}</p>\n//          </div>\n//          <SingleModuleButton text=\"Change PIN\" type=\"submit\" />\n//       </Form>\n//    );\n// };\n// const PINChangeForm = withFormik({\n//    // Transform outer props into form values\n//    mapPropsToValues: props => ({ pin: '', pinConf: '' }),\n//    validationSchema: Yup.object().shape({\n//       pin: Yup.number()\n//          .typeError('PIN must be a number')\n//          .positive('Please enter a positive number')\n//          .integer('PIN must be an integer')\n//          .length(4, 'PIN must be 4 numbers'),\n//       pinConf: Yup.number()\n//          // When PIN has any value, activate pinConf validations\n//          .when('pin', {\n//             is: val => val && val.toString().length > 0,\n//             then: Yup.number()\n//                .required('Please confirm your PIN')\n//                .typeError('PIN confirmation must be a number')\n//                .oneOf([Yup.ref('pin')], 'PINs must be the same')\n//          })\n//    }),\n//    // Submission handler\n//    handleSubmit: (values, { props, setStatus }) => {\n//       const pin = parseInt(values.pin, 10);\n//       if (!pin) {\n//          setStatus('No PIN changed');\n//          return;\n//       }\n//       setStatus('Sending...');\n//       props\n//          .changeCardPin(pin)\n//          .then(data => setStatus('PIN successfully changed!'))\n//          .catch(error => setStatus('Problems, try again...'));\n//    }\n// })(InnerForm);\n// export default PINChangeForm;","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Components/Cards/PINChange/Form.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React from 'react';\n// import { Form, Field, withFormik } from 'formik';\n// import * as Yup from 'yup';\n// import '../../../Tools/validations/YupCustomValidations';\n// import SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\n\n// const InnerForm = props => {\n//    const { errors, touched } = props;\n\n//    return (\n//       <Form>\n//          <div>\n//             <div className=\"form-group\">\n//                <label htmlFor=\"pin\">Enter new PIN</label>\n\n//                <Field\n//                   type=\"text\"\n//                   id=\"pin\"\n//                   className=\"form-control\"\n//                   name=\"pin\"\n//                   maxLength=\"4\"\n//                   placeholder=\"Enter new PIN...\"\n//                />\n//                {touched.pin && errors.pin && <p className=\"field-invalid\">{errors.pin}</p>}\n//             </div>\n\n//             <div className=\"form-group\">\n//                <label htmlFor=\"pin-conf\">Confirm new PIN</label>\n\n//                <Field\n//                   type=\"text\"\n//                   id=\"pin-conf\"\n//                   className=\"form-control\"\n//                   name=\"pinConf\"\n//                   maxLength=\"4\"\n//                   placeholder=\"Confirm new PIN...\"\n//                />\n//                {touched.pinConf && errors.pinConf && (\n//                   <p className=\"field-invalid\">{errors.pinConf}</p>\n//                )}\n//             </div>\n\n//             <p className=\"validation-info\">{props.status}</p>\n//          </div>\n\n//          <SingleModuleButton text=\"Change PIN\" type=\"submit\" />\n//       </Form>\n//    );\n// };\n\n// const PINChangeForm = withFormik({\n//    // Transform outer props into form values\n//    mapPropsToValues: props => ({ pin: '', pinConf: '' }),\n\n//    validationSchema: Yup.object().shape({\n//       pin: Yup.number()\n//          .typeError('PIN must be a number')\n//          .positive('Please enter a positive number')\n//          .integer('PIN must be an integer')\n//          .length(4, 'PIN must be 4 numbers'),\n\n//       pinConf: Yup.number()\n//          // When PIN has any value, activate pinConf validations\n//          .when('pin', {\n//             is: val => val && val.toString().length > 0,\n//             then: Yup.number()\n//                .required('Please confirm your PIN')\n//                .typeError('PIN confirmation must be a number')\n//                .oneOf([Yup.ref('pin')], 'PINs must be the same')\n//          })\n//    }),\n\n//    // Submission handler\n//    handleSubmit: (values, { props, setStatus }) => {\n//       const pin = parseInt(values.pin, 10);\n\n//       if (!pin) {\n//          setStatus('No PIN changed');\n//          return;\n//       }\n\n//       setStatus('Sending...');\n\n//       props\n//          .changeCardPin(pin)\n//          .then(data => setStatus('PIN successfully changed!'))\n//          .catch(error => setStatus('Problems, try again...'));\n//    }\n// })(InnerForm);\n\n// export default PINChangeForm;\n"]},"metadata":{},"sourceType":"module"}