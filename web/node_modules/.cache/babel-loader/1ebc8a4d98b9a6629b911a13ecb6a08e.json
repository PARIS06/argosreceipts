{"ast":null,"code":"var _jsxFileName = \"/Users/moabdo-business/Desktop/argoswebapp/web/src/containers/Panel/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/Actions';\nimport withAuth from '../../hoc/WithAuth';\nimport { isValidToken } from '../../utils/tools'; // import Loader from '../../components/UI/Loader';\n\nimport Navigation from '../../containers/Navigation';\nimport PanelIntro from '../Panel/Intro';\nimport PageNotFound from '../../components/PageNotFound';\nimport Accounts from '../../containers/Accounts';\nimport Receipts from '../../containers/Receipts';\nimport Cards from '../../containers/Cards';\nimport Profile from '../../containers/Profile';\nimport ProfileChangeDetails from '../../containers/Profile/ChangeDetails'; // import { card } from '../../utils/Dummydata'; \n// Get all user's initial data or redirect back to /login if not logged in\n// This is all handled in withAuth HOC\n\nclass Panel extends Component {\n  componentDidMount() {\n    isValidToken().then(() => {\n      this.props.setAuthStatus(true); // this.props.fetchInitialData();\n    }).catch(() => {\n      this.props.setAuthStatus(false);\n    });\n  }\n\n  render() {\n    //   if (!this.props.initialDataStatus) {\n    //      return <Loader />;\n    //   } else {\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/panel\",\n      component: Navigation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/panel\",\n      component: PanelIntro,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/panel/accounts\",\n      component: Accounts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/panel/receipts\",\n      component: Receipts,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/panel/cards\",\n      component: Cards,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/panel/profile\",\n      component: Profile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/panel/change-details\",\n      component: ProfileChangeDetails,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(Route, {\n      component: PageNotFound,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    })));\n  }\n\n} // const mapStateToProps = state => {\n//    return {\n//       initialDataStatus: state.panel.initialDataStatus\n//    };\n// };\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAuthStatus: status => dispatch(actions.setAuthStatus(status)) // fetchInitialData: () => dispatch(actions.fetchInitialData())\n\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(withAuth(Panel));","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/containers/Panel/index.js"],"names":["React","Component","Fragment","Route","Switch","connect","actions","withAuth","isValidToken","Navigation","PanelIntro","PageNotFound","Accounts","Receipts","Cards","Profile","ProfileChangeDetails","Panel","componentDidMount","then","props","setAuthStatus","catch","render","mapDispatchToProps","dispatch","status"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,qBAAzB;AACA,OAAOC,QAAP,MAAqB,oBAArB;AAEA,SAASC,YAAT,QAA6B,mBAA7B,C,CAEA;;AAEA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,OAAOC,oBAAP,MAAiC,wCAAjC,C,CAGA;AAGA;AACA;;AACA,MAAMC,KAAN,SAAoBhB,SAApB,CAA8B;AAC3BiB,EAAAA,iBAAiB,GAAG;AACjBV,IAAAA,YAAY,GACRW,IADJ,CACS,MAAM;AACT,WAAKC,KAAL,CAAWC,aAAX,CAAyB,IAAzB,EADS,CAET;AACF,KAJJ,EAKIC,KALJ,CAKU,MAAM;AACV,WAAKF,KAAL,CAAWC,aAAX,CAAyB,KAAzB;AACF,KAPJ;AAQF;;AAEDE,EAAAA,MAAM,GAAG;AACR;AACA;AACA;AACK,WACG,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,SAAS,EAAEd,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,EAGG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,QAAlB;AAA2B,MAAA,SAAS,EAAEC,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,EAEG,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,iBAAZ;AAA8B,MAAA,SAAS,EAAEE,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFH,EAGG,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,iBAAZ;AAA8B,MAAA,SAAS,EAAEC,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHH,EAIG,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,cAAZ;AAA2B,MAAA,SAAS,EAAEC,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJH,EAKG,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,gBAAZ;AAA6B,MAAA,SAAS,EAAEC,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALH,EAMG,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,uBAAZ;AAAoC,MAAA,SAAS,EAAEC,oBAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANH,EAOG,oBAAC,KAAD;AAAO,MAAA,SAAS,EAAEL,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPH,CAHH,CADH;AAeL;;AA/B0B,C,CAmC9B;AACA;AACA;AACA;AACA;;;AAEA,MAAMa,kBAAkB,GAAGC,QAAQ,IAAI;AACpC,SAAO;AACJJ,IAAAA,aAAa,EAAEK,MAAM,IAAID,QAAQ,CAACnB,OAAO,CAACe,aAAR,CAAsBK,MAAtB,CAAD,CAD7B,CAEJ;;AAFI,GAAP;AAIF,CALD;;AAOA,eAAerB,OAAO,CAAC,IAAD,EAAOmB,kBAAP,CAAP,CAAkCjB,QAAQ,CAACU,KAAD,CAA1C,CAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/Actions';\nimport withAuth from '../../hoc/WithAuth';\n\nimport { isValidToken } from '../../utils/tools';\n\n// import Loader from '../../components/UI/Loader';\n\nimport Navigation from '../../containers/Navigation';\nimport PanelIntro from '../Panel/Intro';\nimport PageNotFound from '../../components/PageNotFound';\n\nimport Accounts from '../../containers/Accounts';\nimport Receipts from '../../containers/Receipts';\nimport Cards from '../../containers/Cards';\nimport Profile from '../../containers/Profile';\nimport ProfileChangeDetails from '../../containers/Profile/ChangeDetails';\n\n\n// import { card } from '../../utils/Dummydata'; \n\n\n// Get all user's initial data or redirect back to /login if not logged in\n// This is all handled in withAuth HOC\nclass Panel extends Component {\n   componentDidMount() {\n      isValidToken()\n         .then(() => {\n            this.props.setAuthStatus(true);\n            // this.props.fetchInitialData();\n         })\n         .catch(() => {\n            this.props.setAuthStatus(false);\n         });\n   }\n\n   render() {\n    //   if (!this.props.initialDataStatus) {\n    //      return <Loader />;\n    //   } else {\n         return (\n            <Fragment>\n               <Route path=\"/panel\" component={Navigation} />\n\n               <Switch>\n                  <Route exact path=\"/panel\" component={PanelIntro} />\n                  <Route path=\"/panel/accounts\" component={Accounts} />\n                  <Route path=\"/panel/receipts\" component={Receipts} />\n                  <Route path=\"/panel/cards\" component={Cards} />\n                  <Route path=\"/panel/profile\" component={Profile} />\n                  <Route path=\"/panel/change-details\" component={ProfileChangeDetails} />\n                  <Route component={PageNotFound} />\n               </Switch>\n            </Fragment>\n         );\n   }\n}\n\n\n// const mapStateToProps = state => {\n//    return {\n//       initialDataStatus: state.panel.initialDataStatus\n//    };\n// };\n\nconst mapDispatchToProps = dispatch => {\n   return {\n      setAuthStatus: status => dispatch(actions.setAuthStatus(status)),\n      // fetchInitialData: () => dispatch(actions.fetchInitialData())\n   };\n};\n\nexport default connect(null, mapDispatchToProps)(withAuth(Panel));\n"]},"metadata":{},"sourceType":"module"}