{"ast":null,"code":"// import format from 'date-fns/format';\n// import jwtDecode from 'jwt-decode';\n// import Moment from 'react-moment';\n// // Add padding from the start of the current string/number\n// export const myPadStart = (el, targetLength, padString) => {\n//    return el.toString().padStart(targetLength, padString);\n// };\n// // Insert something after every n characters in the string\n// export const chunker = (el, step, string) => {\n//    const regExp = new RegExp(`.{${step}}`, 'g');\n//    return el\n//       .toString()\n//       .match(regExp)\n//       .join(string);\n// };\n// // Format date\n// export const formatDate = (date, dateFormat) => format(new Date(date), dateFormat);\n// // Token checker\n// export const getAuthToken = () => {\n//    return localStorage.getItem('token');\n// };\n// export const setAuthToken = token => {\n//    localStorage.setItem('token', token);\n// };\n// export const removeAuthToken = () => {\n//    localStorage.removeItem('token');\n// };\n// export const isValidToken = () => {\n//    return new Promise((resolve, reject) => {\n//       // Check if token is present\n//       const currentTime = Date.now().valueOf() / 1000;\n//       const token = getAuthToken();\n//       if (!token) {\n//          reject();\n//          return;\n//       }\n//       const decodedToken = jwtDecode(token);\n//       // If token expired - remove it\n//       if (decodedToken.exp < currentTime) {\n//          removeAuthToken();\n//          reject();\n//          return;\n//       }\n//       resolve(token);\n//    });\n// };","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Tools/index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["// import format from 'date-fns/format';\n// import jwtDecode from 'jwt-decode';\n// import Moment from 'react-moment';\n\n// // Add padding from the start of the current string/number\n// export const myPadStart = (el, targetLength, padString) => {\n//    return el.toString().padStart(targetLength, padString);\n// };\n\n// // Insert something after every n characters in the string\n// export const chunker = (el, step, string) => {\n//    const regExp = new RegExp(`.{${step}}`, 'g');\n//    return el\n//       .toString()\n//       .match(regExp)\n//       .join(string);\n// };\n\n// // Format date\n\n// export const formatDate = (date, dateFormat) => format(new Date(date), dateFormat);\n\n// // Token checker\n// export const getAuthToken = () => {\n//    return localStorage.getItem('token');\n// };\n\n// export const setAuthToken = token => {\n//    localStorage.setItem('token', token);\n// };\n\n// export const removeAuthToken = () => {\n//    localStorage.removeItem('token');\n// };\n\n// export const isValidToken = () => {\n//    return new Promise((resolve, reject) => {\n//       // Check if token is present\n//       const currentTime = Date.now().valueOf() / 1000;\n//       const token = getAuthToken();\n\n//       if (!token) {\n//          reject();\n//          return;\n//       }\n\n//       const decodedToken = jwtDecode(token);\n\n//       // If token expired - remove it\n//       if (decodedToken.exp < currentTime) {\n//          removeAuthToken();\n\n//          reject();\n//          return;\n//       }\n\n//       resolve(token);\n//    });\n// };\n"]},"metadata":{},"sourceType":"module"}