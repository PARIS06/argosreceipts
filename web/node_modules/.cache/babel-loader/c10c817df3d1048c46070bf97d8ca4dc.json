{"ast":null,"code":"import format from 'date-fns/format';\nimport jwtDecode from 'jwt-decode'; // Add padding from the start of the current string/number\n\nexport const myPadStart = (el, targetLength, padString) => {\n  return el.toString().padStart(targetLength, padString);\n}; // Insert something after every n characters in the string\n\nexport const chunker = (el, step, string) => {\n  const regExp = new RegExp(`.{${step}}`, 'g');\n  return el.toString().match(regExp).join(string);\n}; // Format date\n\nexport const formatDate = (date, dateFormat) => format(new Date(date), dateFormat); // Token checker\n\nexport const getAuthToken = () => {\n  return localStorage.getItem('token');\n};\nexport const setAuthToken = token => {\n  localStorage.setItem('token', token);\n};\nexport const removeAuthToken = () => {\n  localStorage.removeItem('token');\n};\nexport const isValidToken = () => {\n  return new Promise((resolve, reject) => {\n    // Check if token is present\n    const currentTime = Date.now().valueOf() / 1000;\n    const token = getAuthToken();\n\n    if (!token) {\n      reject();\n      return;\n    }\n\n    const decodedToken = jwtDecode(token); // If token expired - remove it\n\n    if (decodedToken.exp < currentTime) {\n      removeAuthToken();\n      reject();\n      return;\n    }\n\n    resolve(token);\n  });\n};","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Tools/index.js"],"names":["format","jwtDecode","myPadStart","el","targetLength","padString","toString","padStart","chunker","step","string","regExp","RegExp","match","join","formatDate","date","dateFormat","Date","getAuthToken","localStorage","getItem","setAuthToken","token","setItem","removeAuthToken","removeItem","isValidToken","Promise","resolve","reject","currentTime","now","valueOf","decodedToken","exp"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAG,CAACC,EAAD,EAAKC,YAAL,EAAmBC,SAAnB,KAAiC;AACxD,SAAOF,EAAE,CAACG,QAAH,GAAcC,QAAd,CAAuBH,YAAvB,EAAqCC,SAArC,CAAP;AACF,CAFM,C,CAIP;;AACA,OAAO,MAAMG,OAAO,GAAG,CAACL,EAAD,EAAKM,IAAL,EAAWC,MAAX,KAAsB;AAC1C,QAAMC,MAAM,GAAG,IAAIC,MAAJ,CAAY,KAAIH,IAAK,GAArB,EAAyB,GAAzB,CAAf;AACA,SAAON,EAAE,CACLG,QADG,GAEHO,KAFG,CAEGF,MAFH,EAGHG,IAHG,CAGEJ,MAHF,CAAP;AAIF,CANM,C,CAQP;;AACA,OAAO,MAAMK,UAAU,GAAG,CAACC,IAAD,EAAOC,UAAP,KAAsBjB,MAAM,CAAC,IAAIkB,IAAJ,CAASF,IAAT,CAAD,EAAiBC,UAAjB,CAA/C,C,CAEP;;AACA,OAAO,MAAME,YAAY,GAAG,MAAM;AAC/B,SAAOC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAP;AACF,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAClCH,EAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BD,KAA9B;AACF,CAFM;AAIP,OAAO,MAAME,eAAe,GAAG,MAAM;AAClCL,EAAAA,YAAY,CAACM,UAAb,CAAwB,OAAxB;AACF,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAG,MAAM;AAC/B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrC;AACA,UAAMC,WAAW,GAAGb,IAAI,CAACc,GAAL,GAAWC,OAAX,KAAuB,IAA3C;AACA,UAAMV,KAAK,GAAGJ,YAAY,EAA1B;;AAEA,QAAI,CAACI,KAAL,EAAY;AACTO,MAAAA,MAAM;AACN;AACF;;AAED,UAAMI,YAAY,GAAGjC,SAAS,CAACsB,KAAD,CAA9B,CAVqC,CAYrC;;AACA,QAAIW,YAAY,CAACC,GAAb,GAAmBJ,WAAvB,EAAoC;AACjCN,MAAAA,eAAe;AAEfK,MAAAA,MAAM;AACN;AACF;;AAEDD,IAAAA,OAAO,CAACN,KAAD,CAAP;AACF,GArBM,CAAP;AAsBF,CAvBM","sourcesContent":["import format from 'date-fns/format';\nimport jwtDecode from 'jwt-decode';\n\n// Add padding from the start of the current string/number\nexport const myPadStart = (el, targetLength, padString) => {\n   return el.toString().padStart(targetLength, padString);\n};\n\n// Insert something after every n characters in the string\nexport const chunker = (el, step, string) => {\n   const regExp = new RegExp(`.{${step}}`, 'g');\n   return el\n      .toString()\n      .match(regExp)\n      .join(string);\n};\n\n// Format date\nexport const formatDate = (date, dateFormat) => format(new Date(date), dateFormat);\n\n// Token checker\nexport const getAuthToken = () => {\n   return localStorage.getItem('token');\n};\n\nexport const setAuthToken = token => {\n   localStorage.setItem('token', token);\n};\n\nexport const removeAuthToken = () => {\n   localStorage.removeItem('token');\n};\n\nexport const isValidToken = () => {\n   return new Promise((resolve, reject) => {\n      // Check if token is present\n      const currentTime = Date.now().valueOf() / 1000;\n      const token = getAuthToken();\n\n      if (!token) {\n         reject();\n         return;\n      }\n\n      const decodedToken = jwtDecode(token);\n\n      // If token expired - remove it\n      if (decodedToken.exp < currentTime) {\n         removeAuthToken();\n\n         reject();\n         return;\n      }\n\n      resolve(token);\n   });\n};\n"]},"metadata":{},"sourceType":"module"}