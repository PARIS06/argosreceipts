{"ast":null,"code":"var _jsxFileName = \"/Users/moabdo-business/Desktop/argoswebapp/web/src/components/Authorization/Login/Form.js\";\nimport React from 'react';\nimport { withStyles, useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport * as actions from '../../../store/Actions/';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\n\nconst styles = theme => ({\n  Logo: {\n    height: \"7em\",\n    padding: \"10px\"\n  },\n  button: { ...theme.typography.logIn,\n    borderRadius: \"40px\",\n    width: \"15em\",\n    \"&:hover\": {\n      backgroundColor: \"theme.palette.primary.light\",\n      color: \"white\"\n    }\n  }\n}); // const theme = useTheme()\n\n\nconst innerForm = props => {\n  const {\n    classes,\n    values,\n    errors,\n    touched,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset\n  } = props;\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    align: \"center\",\n    color: \"primary\",\n    variant: \"h4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Log In\")), React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"column\",\n    style: {\n      maxWidth: \"20em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    required: true,\n    fullWidth: true,\n    label: \"Email\",\n    id: \"email\",\n    type: \"email\",\n    name: \"email\",\n    value: values.email,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    helperText: touched.email && Boolean(errors.email),\n    style: {\n      marginTop: \"2em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })), touched.email && errors.email ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, errors.email) : null, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    required: true,\n    fullWidth: true,\n    label: \"Password\",\n    id: \"password\",\n    name: \"password\",\n    type: \"password\",\n    value: values.password,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    helperText: touched.password && Boolean(errors.password),\n    autoComplete: \"current-password\",\n    style: {\n      marginTop: \"2em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })), touched.password && errors.password ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, errors.password) : null, React.createElement(Grid, {\n    item: true,\n    container: true,\n    justify: \"center\",\n    style: {\n      marginTop: \"2em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Button, {\n    className: classes.button,\n    variant: \"contained\",\n    type: \"submit\",\n    disabled: isSubmitting,\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Log in\"))))))));\n};\n\nconst LoginForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: ({\n    email,\n    password\n  }) => {\n    return {\n      email: '',\n      password: ''\n    };\n  },\n  // Add a custom validation function (this can be async too!)\n  validationSchema: Yup.object().shape({\n    email: Yup.string().required('Email is required').email('This is not a valid email'),\n    password: Yup.string().required('Password is required').min(6, 'Your password has to be at least 6 characters')\n  }),\n  // Submission handler\n  handleSubmit: (values, {\n    props,\n    setStatus\n  }) => {\n    props.onLoginSubmit(values.email, values.password);\n  }\n})(innerForm);\nexport default withStyles(styles)(LoginForm);","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/components/Authorization/Login/Form.js"],"names":["React","withStyles","useTheme","Grid","Typography","Button","TextField","actions","withFormik","Yup","styles","theme","Logo","height","padding","button","typography","logIn","borderRadius","width","backgroundColor","color","innerForm","props","classes","values","errors","touched","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","maxWidth","email","Boolean","marginTop","password","LoginForm","mapPropsToValues","validationSchema","object","shape","string","required","min","setStatus","onLoginSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { withStyles, useTheme } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\n\nimport * as actions from '../../../store/Actions/';\n\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\n\n\nconst styles = (theme) => ({\n   Logo: {\n      height: \"7em\",\n      padding: \"10px\",\n    },\n    button: {\n      ...theme.typography.logIn,\n      borderRadius: \"40px\",\n      width: \"15em\",\n      \"&:hover\": {\n        backgroundColor: \"theme.palette.primary.light\",\n        color: \"white\"\n        }  \n    }\n});\n\n\n   // const theme = useTheme()\n\n\nconst innerForm = props => {\n   \n\n   const { classes,\n           values,  \n           errors, \n           touched,\n           isSubmitting,\n           handleChange,\n           handleBlur,\n           handleSubmit,\n           handleReset\n          } = props;\n\n   return (\n      <Grid container direction=\"row\">\n         <Grid item container direction=\"column\" justify=\"center\" alignItems=\"center\">\n            <Grid item>\n               <Grid container direction=\"column\">\n                  <Grid item>\n                     <Typography align=\"center\" color=\"primary\" variant=\"h4\">Log In</Typography>\n                  </Grid>\n                  <Grid item container direction=\"column\" style={{maxWidth: \"20em\"}}>\n                     <form onSubmit={handleSubmit}>\n                        <Grid item>\n                           <TextField \n                              required\n                              fullWidth\n                              label=\"Email\" \n                              id=\"email\"\n                              type=\"email\"\n                              name=\"email\"\n                              value={values.email}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              helperText={touched.email && Boolean(errors.email)}\n                              style={{marginTop: \"2em\"}} \n                           />\n                        </Grid>\n                        {touched.email && errors.email ? (<div>{errors.email}</div>) : null}\n                        <Grid item>\n                           <TextField \n                              required\n                              fullWidth\n                              label=\"Password\" \n                              id=\"password\"\n                              name=\"password\"         \n                              type=\"password\"\n                              value={values.password}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              helperText={touched.password && Boolean(errors.password)}\n                              autoComplete=\"current-password\"\n                              style={{marginTop: \"2em\"}}\n                           />\n                        </Grid>\n                        {touched.password && errors.password ? (<div>{errors.password}</div>) : null}\n                        <Grid item container justify=\"center\" style={{ marginTop: \"2em\" }}>\n                           <Button \n                              className={classes.button}\n                              variant= \"contained\" \n                              type=\"submit\"\n                              disabled={isSubmitting} \n                              color=\"secondary\">\n                                 Log in\n                           </Button>\n                        </Grid>\n                     </ form>\n                     {/* )} */}\n                     {/* </Formik> */}\n                  </Grid>\n               </Grid>\n            </Grid>\n         </Grid>\n      </Grid>\n   )\n};\n\nconst LoginForm = withFormik({\n   // Transform outer props into form values\n   mapPropsToValues: ({ \n         email,\n         password \n      }) => {\n         return {\n            email: '',\n            password: ''\n         };\n      },\n\n   // Add a custom validation function (this can be async too!)\n   validationSchema: Yup.object().shape({\n      email: Yup.string()\n         .required('Email is required')\n         .email('This is not a valid email'),\n      password: Yup.string()\n         .required('Password is required')\n         .min(6, 'Your password has to be at least 6 characters')\n   }),\n\n   // Submission handler\n   handleSubmit: (values, { props, setStatus }) => {\n      props.onLoginSubmit(values.email, values.password)\n   }\n})(innerForm);\n\nexport default withStyles(styles)(LoginForm);\n\n\n\n"]},"metadata":{},"sourceType":"module"}