{"ast":null,"code":"var _jsxFileName = \"/Users/moabdo-business/Desktop/argoswebapp/web/src/hoc/WithAuth/index.js\";\nimport React, { Component } from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux'; // Handle redirects for /login, /register and /panel\n\nconst withAuth = WrappedComponent => {\n  return class extends Component {\n    componentDidMount() {\n      this.shouldRedirect(this.props);\n    }\n\n    shouldComponentUpdate(nextProps) {\n      this.shouldRedirect(nextProps);\n      return true;\n    }\n\n    shouldRedirect(props) {\n      const path = props.location.pathname; // If we are on login/register and auth is complete, redirect to /panel\n      // Otherwise redirect to /login\n\n      if (path === '/' && props.authStatus && props.userType) {\n        this.props.history.push('/panel');\n      } else if (path === '/' && props.authStatus && !props.userType) {\n        this.props.history.push('/merchants');\n      } else if (path.startsWith('/panel') && !props.authStatus) {\n        this.props.history.push('/');\n      }\n    }\n\n    render() {\n      return React.createElement(WrappedComponent, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }));\n    }\n\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    authStatus: state.auth.status,\n    userType: state.user_type.status\n  };\n};\n\nexport default compose(connect(mapStateToProps), withAuth);","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/hoc/WithAuth/index.js"],"names":["React","Component","compose","connect","withAuth","WrappedComponent","componentDidMount","shouldRedirect","props","shouldComponentUpdate","nextProps","path","location","pathname","authStatus","userType","history","push","startsWith","render","mapStateToProps","state","auth","status","user_type"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;AACA,MAAMC,QAAQ,GAAGC,gBAAgB,IAAI;AAClC,SAAO,cAAcJ,SAAd,CAAwB;AAC5BK,IAAAA,iBAAiB,GAAG;AACjB,WAAKC,cAAL,CAAoB,KAAKC,KAAzB;AACF;;AAEDC,IAAAA,qBAAqB,CAACC,SAAD,EAAY;AAC9B,WAAKH,cAAL,CAAoBG,SAApB;AAEA,aAAO,IAAP;AACF;;AAEDH,IAAAA,cAAc,CAACC,KAAD,EAAQ;AACnB,YAAMG,IAAI,GAAGH,KAAK,CAACI,QAAN,CAAeC,QAA5B,CADmB,CAInB;AACA;;AAEA,UAAKF,IAAI,KAAK,GAAV,IAAkBH,KAAK,CAACM,UAAxB,IAAsCN,KAAK,CAACO,QAAhD,EAA0D;AACvD,aAAKP,KAAL,CAAWQ,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACF,OAFD,MAGK,IAAKN,IAAI,KAAK,GAAV,IAAkBH,KAAK,CAACM,UAAxB,IAAsC,CAACN,KAAK,CAACO,QAAjD,EAA2D;AAC7D,aAAKP,KAAL,CAAWQ,OAAX,CAAmBC,IAAnB,CAAwB,YAAxB;AACF,OAFI,MAGA,IAAIN,IAAI,CAACO,UAAL,CAAgB,QAAhB,KAA6B,CAACV,KAAK,CAACM,UAAxC,EAAoD;AACtD,aAAKN,KAAL,CAAWQ,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACF;AACH;;AAEDE,IAAAA,MAAM,GAAG;AACN,aAAO,oBAAC,gBAAD,oBAAsB,KAAKX,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACF;;AA/B2B,GAA/B;AAiCF,CAlCD;;AAoCA,MAAMY,eAAe,GAAGC,KAAK,IAAI;AAC9B,SAAO;AACJP,IAAAA,UAAU,EAAEO,KAAK,CAACC,IAAN,CAAWC,MADnB;AAEJR,IAAAA,QAAQ,EAAEM,KAAK,CAACG,SAAN,CAAgBD;AAFtB,GAAP;AAIF,CALD;;AAOA,eAAerB,OAAO,CACnBC,OAAO,CAACiB,eAAD,CADY,EAEnBhB,QAFmB,CAAtB","sourcesContent":["import React, { Component } from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\n\n// Handle redirects for /login, /register and /panel\nconst withAuth = WrappedComponent => {\n   return class extends Component {\n      componentDidMount() {\n         this.shouldRedirect(this.props);\n      }\n\n      shouldComponentUpdate(nextProps) {\n         this.shouldRedirect(nextProps);\n\n         return true;\n      }\n\n      shouldRedirect(props) {\n         const path = props.location.pathname;\n\n\n         // If we are on login/register and auth is complete, redirect to /panel\n         // Otherwise redirect to /login\n         \n         if ((path === '/') && props.authStatus && props.userType) {\n            this.props.history.push('/panel');\n         } \n         else if ((path === '/') && props.authStatus && !props.userType) {\n            this.props.history.push('/merchants');\n         }  \n         else if (path.startsWith('/panel') && !props.authStatus) {\n            this.props.history.push('/');\n         }\n      }\n\n      render() {\n         return <WrappedComponent {...this.props} />;\n      }\n   };\n};\n\nconst mapStateToProps = state => {\n   return {\n      authStatus: state.auth.status,\n      userType: state.user_type.status\n   };\n};\n\nexport default compose(\n   connect(mapStateToProps),\n   withAuth\n);\n"]},"metadata":{},"sourceType":"module"}