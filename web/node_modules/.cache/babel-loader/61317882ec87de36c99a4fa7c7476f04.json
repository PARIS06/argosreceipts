{"ast":null,"code":"import { updateAPIConfig } from '../../Api/base';\nimport { loginUser, registerUser } from '../../Api/auth';\nimport * as actionTypes from './actionTypes';\nimport axios from 'axios';\nimport { setAuthToken } from '../../Tools';\nexport const authStart = () => {\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = authData => {\n  return {\n    type: actionTypes.AUTH_SUCCESS\n  };\n};\nexport const authFail = error => {\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n};\nexport const register = (firstName, lastName, email, password, user_type) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      firstName: firstName,\n      lastName: lastName,\n      user_type: user_type,\n      returnSecureToken: true\n    };\n    axios.post('http://54.152.6.107/auth/create-user/', authData).then(response => {\n      console.log(response);\n      dispatch(authSuccess(response.data));\n    }).catch(err => {\n      console.log(err);\n      dispatch(authFail(err));\n    });\n  };\n}; // Tools\n\nexport const setAuthStatus = (status, email = null) => ({\n  type: actionTypes.SET_AUTH_STATUS,\n  status,\n  email\n}); // Login\n\nexport const login = data => async dispatch => {\n  try {\n    const token = await loginUser(data);\n\n    if (!token) {\n      dispatch(setAuthStatus(false));\n      return;\n    }\n\n    setAuthToken(token);\n    updateAPIConfig({\n      authToken: token\n    });\n    dispatch(setAuthStatus(true));\n  } catch (err) {\n    dispatch(setAuthStatus(false));\n  }\n}; // // Register\n// export const register = data => async dispatch => {\n//    try {\n//       const user = await registerUser(data);\n//       if (!user) {\n//          dispatch(setAuthStatus(false));\n//          return;\n//       }\n//       dispatch(setAuthStatus(true));\n//    } catch (err) {\n//       dispatch(setAuthStatus(false));\n//    }\n// };","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Store/Actions/auth.js"],"names":["updateAPIConfig","loginUser","registerUser","actionTypes","axios","setAuthToken","authStart","type","AUTH_START","authSuccess","authData","AUTH_SUCCESS","authFail","error","AUTH_FAIL","register","firstName","lastName","email","password","user_type","dispatch","returnSecureToken","post","then","response","console","log","data","catch","err","setAuthStatus","status","SET_AUTH_STATUS","login","token","authToken"],"mappings":"AAAA,SAASA,eAAT,QAAgC,gBAAhC;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,gBAAxC;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,QAA6B,aAA7B;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC5B,SAAO;AACJC,IAAAA,IAAI,EAAEJ,WAAW,CAACK;AADd,GAAP;AAGF,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAIC,QAAD,IAAc;AACtC,SAAO;AACJH,IAAAA,IAAI,EAAEJ,WAAW,CAACQ;AADd,GAAP;AAGF,CAJM;AAMP,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAChC,SAAO;AACJN,IAAAA,IAAI,EAAEJ,WAAW,CAACW,SADd;AAEJD,IAAAA,KAAK,EAAEA;AAFH,GAAP;AAIF,CALM;AAOP,OAAO,MAAME,QAAQ,GAAG,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,KAAtB,EAA6BC,QAA7B,EAAuCC,SAAvC,KAAqD;AAC1E,SAAOC,QAAQ,IAAI;AAChBA,IAAAA,QAAQ,CAACf,SAAS,EAAV,CAAR;AACA,UAAMI,QAAQ,GAAG;AACdQ,MAAAA,KAAK,EAAEA,KADO;AAEdC,MAAAA,QAAQ,EAAEA,QAFI;AAGdH,MAAAA,SAAS,EAAEA,SAHG;AAIdC,MAAAA,QAAQ,EAAEA,QAJI;AAKdG,MAAAA,SAAS,EAAEA,SALG;AAMdE,MAAAA,iBAAiB,EAAE;AANL,KAAjB;AAQAlB,IAAAA,KAAK,CAACmB,IAAN,CAAW,uCAAX,EAAoDb,QAApD,EACIc,IADJ,CACSC,QAAQ,IAAI;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAJ,MAAAA,QAAQ,CAACZ,WAAW,CAACgB,QAAQ,CAACG,IAAV,CAAZ,CAAR;AACF,KAJJ,EAKIC,KALJ,CAKUC,GAAG,IAAI;AACXJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACAT,MAAAA,QAAQ,CAACT,QAAQ,CAACkB,GAAD,CAAT,CAAR;AACF,KARJ;AASF,GAnBD;AAoBF,CArBM,C,CAyBP;;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,MAAD,EAASd,KAAK,GAAG,IAAjB,MAA2B;AACrDX,EAAAA,IAAI,EAAEJ,WAAW,CAAC8B,eADmC;AAErDD,EAAAA,MAFqD;AAGrDd,EAAAA;AAHqD,CAA3B,CAAtB,C,CAMP;;AACA,OAAO,MAAMgB,KAAK,GAAGN,IAAI,IAAI,MAAMP,QAAN,IAAkB;AAC5C,MAAI;AACD,UAAMc,KAAK,GAAG,MAAMlC,SAAS,CAAC2B,IAAD,CAA7B;;AAEA,QAAI,CAACO,KAAL,EAAY;AACTd,MAAAA,QAAQ,CAACU,aAAa,CAAC,KAAD,CAAd,CAAR;AACA;AACF;;AAED1B,IAAAA,YAAY,CAAC8B,KAAD,CAAZ;AACAnC,IAAAA,eAAe,CAAC;AAAEoC,MAAAA,SAAS,EAAED;AAAb,KAAD,CAAf;AACAd,IAAAA,QAAQ,CAACU,aAAa,CAAC,IAAD,CAAd,CAAR;AACF,GAXD,CAWE,OAAOD,GAAP,EAAY;AACXT,IAAAA,QAAQ,CAACU,aAAa,CAAC,KAAD,CAAd,CAAR;AACF;AACH,CAfM,C,CAiBP;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import { updateAPIConfig } from '../../Api/base';\nimport { loginUser, registerUser } from '../../Api/auth';\nimport * as actionTypes from './actionTypes';\n\nimport axios from 'axios';\n\nimport { setAuthToken } from '../../Tools';\n\nexport const authStart = () => {\n   return {\n      type: actionTypes.AUTH_START\n   }\n}\n\nexport const authSuccess = (authData) => {\n   return {\n      type: actionTypes.AUTH_SUCCESS\n   }\n}\n\nexport const authFail = (error) => {\n   return {\n      type: actionTypes.AUTH_FAIL,\n      error: error\n   }\n}\n\nexport const register = (firstName, lastName, email, password, user_type) => {\n   return dispatch => {\n      dispatch(authStart());\n      const authData = {\n         email: email,\n         password: password,\n         firstName: firstName,\n         lastName: lastName,\n         user_type: user_type,\n         returnSecureToken: true\n      };\n      axios.post('http://54.152.6.107/auth/create-user/', authData)\n         .then(response => {\n            console.log(response);\n            dispatch(authSuccess(response.data))\n         })\n         .catch(err => {\n            console.log(err);\n            dispatch(authFail(err));\n         });\n   };\n}\n\n\n\n// Tools\n\nexport const setAuthStatus = (status, email = null) => ({\n   type: actionTypes.SET_AUTH_STATUS,\n   status,\n   email\n});\n\n// Login\nexport const login = data => async dispatch => {\n   try {\n      const token = await loginUser(data);\n\n      if (!token) {\n         dispatch(setAuthStatus(false));\n         return;\n      }\n\n      setAuthToken(token);\n      updateAPIConfig({ authToken: token });\n      dispatch(setAuthStatus(true));\n   } catch (err) {\n      dispatch(setAuthStatus(false));\n   }\n};\n\n// // Register\n// export const register = data => async dispatch => {\n//    try {\n//       const user = await registerUser(data);\n\n//       if (!user) {\n//          dispatch(setAuthStatus(false));\n//          return;\n//       }\n\n//       dispatch(setAuthStatus(true));\n//    } catch (err) {\n//       dispatch(setAuthStatus(false));\n//    }\n// };\n"]},"metadata":{},"sourceType":"module"}