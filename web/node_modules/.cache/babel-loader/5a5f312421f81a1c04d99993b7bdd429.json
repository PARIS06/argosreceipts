{"ast":null,"code":"const faker = require('faker'); // Add padding from the start of the current string/number\n\n\nexport const myPadStart = (el, targetLength, padString) => {\n  return el.toString().padStart(targetLength, padString);\n}; // Insert something after every n characters in the string\n\nexport const chunker = (el, step, string) => {\n  const regExp = new RegExp(`.{${step}}`, 'g');\n  return el.toString().match(regExp).join(string);\n};\nexport const defaultUserData = {\n  email: faker.internet.email(),\n  password: 'admin123',\n  firstName: 'John',\n  lastName: 'Tsiros',\n  dateOfBirth: faker.date.between('1960-01-01', '2000-12-31'),\n  phone: faker.phone.phoneNumberFormat(1),\n  picture: faker.internet.avatar(),\n  streetAddr: faker.address.streetAddress(),\n  postcode: faker.address.zipCode(),\n  city: faker.address.city()\n};\n\nconst createUser = () => {\n  const user = new User({ ...defaultUserData\n  });\n  return user.save();\n};\n\nconst createControlledUser = () => {\n  const user = new User({ ...defaultUserData,\n    email: 'email@example.com'\n  });\n  return user.save();\n}; // Accounts\n\n\nconst createAccount = user => {\n  const account = new Account({\n    type: faker.random.arrayElement(['credit', 'debit']),\n    owner: user._id,\n    isActive: faker.random.boolean(),\n    sortcode: faker.finance.mask(6, false, false),\n    number: faker.finance.mask(8, false, false),\n    currency: faker.finance.currencyCode(),\n    balance: faker.finance.amount(1, 10000, 2)\n  });\n  return account.save();\n}; // Cards\n\n\nexport const card = {\n  owner: user._id,\n  accountId,\n  isActive: faker.random.boolean(),\n  number: faker.finance.mask(16, false, false),\n  expiresMonth: faker.random.number({\n    min: 1,\n    max: 12\n  }),\n  expiresYear: faker.random.number({\n    min: 2020,\n    max: 2030\n  })\n}; // Transfers\n\nconst createTransfer = (user, sourceAccountId) => {\n  const transfer = new Transfer({\n    type: faker.random.arrayElement(['normal', 'turbo']),\n    payeeName: `${faker.name.firstName()} ${faker.name.lastName()}`,\n    date: faker.date.between('2020-01-01', '2020-12-31'),\n    amount: faker.finance.amount(1, 2500, 2),\n    status: faker.random.arrayElement(['planned', 'done']),\n    reference: faker.lorem.words(3).substring(0, 20),\n    sourceAccountId,\n    sender: user._id,\n    recipient: mongoose.Types.ObjectId()\n  });\n  return transfer.save();\n}; // Messages\n\n\nconst createMessage = user => {\n  const message = new Message({\n    title: faker.lorem.words(5),\n    sentDate: faker.date.between('2020-01-01', '2020-12-31'),\n    recipient: user._id,\n    content: faker.lorem.paragraph(),\n    isRead: faker.random.boolean()\n  });\n  return message.save();\n}; // Statistics\n\n\nconst createStats = accountId => {\n  const stats = new Stat({\n    accountId,\n    name: faker.date.recent(_.random(1, 60, false)),\n    // Date is NOW or 1-60 days before\n    date: faker.date.recent(_.random(1, 60, false)),\n    income: faker.finance.amount(100, 5000, 2),\n    expenses: faker.finance.amount(100, 5000, 2)\n  });\n  return stats.save();\n};","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Utils/Dummydata.js"],"names":["faker","require","myPadStart","el","targetLength","padString","toString","padStart","chunker","step","string","regExp","RegExp","match","join","defaultUserData","email","internet","password","firstName","lastName","dateOfBirth","date","between","phone","phoneNumberFormat","picture","avatar","streetAddr","address","streetAddress","postcode","zipCode","city","createUser","user","User","save","createControlledUser","createAccount","account","Account","type","random","arrayElement","owner","_id","isActive","boolean","sortcode","finance","mask","number","currency","currencyCode","balance","amount","card","accountId","expiresMonth","min","max","expiresYear","createTransfer","sourceAccountId","transfer","Transfer","payeeName","name","status","reference","lorem","words","substring","sender","recipient","mongoose","Types","ObjectId","createMessage","message","Message","title","sentDate","content","paragraph","isRead","createStats","stats","Stat","recent","_","income","expenses"],"mappings":"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","sourcesContent":["const faker = require('faker');\n\n\n// Add padding from the start of the current string/number\nexport const myPadStart = (el, targetLength, padString) => {\n    return el.toString().padStart(targetLength, padString);\n };\n \n // Insert something after every n characters in the string\n export const chunker = (el, step, string) => {\n    const regExp = new RegExp(`.{${step}}`, 'g');\n    return el\n       .toString()\n       .match(regExp)\n       .join(string);\n };\n\n\n\nexport const defaultUserData = {\n    email: faker.internet.email(),\n    password: 'admin123',\n    firstName: 'John',\n    lastName: 'Tsiros',\n    dateOfBirth: faker.date.between('1960-01-01', '2000-12-31'),\n    phone: faker.phone.phoneNumberFormat(1),\n    picture: faker.internet.avatar(),\n    streetAddr: faker.address.streetAddress(),\n    postcode: faker.address.zipCode(),\n    city: faker.address.city()\n };\n \n const createUser = () => {\n    const user = new User({ ...defaultUserData });\n \n    return user.save();\n };\n \n const createControlledUser = () => {\n    const user = new User({\n       ...defaultUserData,\n       email: 'email@example.com'\n    });\n \n    return user.save();\n };\n \n // Accounts\n const createAccount = user => {\n    const account = new Account({\n       type: faker.random.arrayElement(['credit', 'debit']),\n       owner: user._id,\n       isActive: faker.random.boolean(),\n       sortcode: faker.finance.mask(6, false, false),\n       number: faker.finance.mask(8, false, false),\n       currency: faker.finance.currencyCode(),\n       balance: faker.finance.amount(1, 10000, 2)\n    });\n \n    return account.save();\n };\n \n // Cards\n    export const card = {\n       owner: user._id,\n       accountId,\n       isActive: faker.random.boolean(),\n       number: faker.finance.mask(16, false, false),\n       expiresMonth: faker.random.number({ min: 1, max: 12 }),\n       expiresYear: faker.random.number({ min: 2020, max: 2030 }),\n    }\n\n \n // Transfers\n const createTransfer = (user, sourceAccountId) => {\n    const transfer = new Transfer({\n       type: faker.random.arrayElement(['normal', 'turbo']),\n       payeeName: `${faker.name.firstName()} ${faker.name.lastName()}`,\n       date: faker.date.between('2020-01-01', '2020-12-31'),\n       amount: faker.finance.amount(1, 2500, 2),\n       status: faker.random.arrayElement(['planned', 'done']),\n       reference: faker.lorem.words(3).substring(0, 20),\n       sourceAccountId,\n       sender: user._id,\n       recipient: mongoose.Types.ObjectId()\n    });\n \n    return transfer.save();\n };\n \n // Messages\n const createMessage = user => {\n    const message = new Message({\n       title: faker.lorem.words(5),\n       sentDate: faker.date.between('2020-01-01', '2020-12-31'),\n       recipient: user._id,\n       content: faker.lorem.paragraph(),\n       isRead: faker.random.boolean()\n    });\n \n    return message.save();\n };\n \n // Statistics\n const createStats = accountId => {\n    const stats = new Stat({\n       accountId,\n       name: faker.date.recent(_.random(1, 60, false)),\n       // Date is NOW or 1-60 days before\n       date: faker.date.recent(_.random(1, 60, false)),\n       income: faker.finance.amount(100, 5000, 2),\n       expenses: faker.finance.amount(100, 5000, 2)\n    });\n \n    return stats.save();\n };"]},"metadata":{},"sourceType":"module"}