{"ast":null,"code":"var _jsxFileName = \"/Users/moabdo-business/Desktop/argoswebapp/web/src/Components/Authorization/Register/Form.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Input from '../../../Components/UI/FormBoxes/Input/Input';\nimport SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\n\nconst RegisterForm = props => {\n  const formElementsArray = [];\n\n  for (let key in props.controls) {\n    formElementsArray.push({\n      id: key,\n      config: props.controls[key]\n    });\n  }\n\n  const form = formElementsArray.map(formElement => React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => this.inputChangedHandler(event, formElement.id),\n    invalid: !formElement.config.valid,\n    touched: formElement.config.touched,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }));\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, form, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/auth/login/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Already have an account?\")), React.createElement(SingleModuleButton, {\n    text: \"Create your account\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }))) //    <Form className=\"register-form\">\n  //       {JSON.stringify(values)}\n  //       <div>\n  //      <div className=\"form-group\">\n  //         <Field \n  //          type=\"text\"\n  //          name=\"name\"\n  //          placeholder=\"Enter your name\"\n  //          className=\"form-control login-input\"\n  //          onChange={handleChange}\n  //          onBlur={handleBlur}\n  //          value={values.name}\n  //         />\n  //         {touched.name && errors.name && \n  //             <p className=\"field-invalid\">{errors.name}</p>\n  //         }\n  //      </div>\n  //      <div className=\"form-group\">\n  //         <Field \n  //          type=\"email\"\n  //          name=\"email\"\n  //          placeholder=\"Please enter a valid email\"\n  //          className=\"form-control login-input\"\n  //          onChange={handleChange}\n  //          onBlur={handleBlur}\n  //          value={values.email}\n  //         />\n  //         {touched.email && errors.email && \n  //             <p className=\"field-invalid\">{errors.email}</p>\n  //         }\n  //      </div>\n  //      <div className=\"form-group\">\n  //         <Field \n  //          type=\"password\"\n  //          name=\"password\"\n  //          placeholder=\"Choose a password\"\n  //          className=\"form-control password-input\"\n  //          onChange={handleChange}\n  //          onBlur={handleBlur}\n  //          value={values.password}\n  //         />\n  //         {touched.password && errors.password && (\n  //             <p className=\"field-invalid\">{errors.password}</p>\n  //          )}\n  //      </div>\n  //      <div className=\"form-group\">\n  //         <select\n  //          type=\"select\"\n  //          name=\"user_type\"\n  //          placeholder=\"Choose an account type\"\n  //          className=\"form-control\"\n  //          onChange={handleChange}\n  //          onBlur={handleBlur}\n  //          value={values.user_type}\n  //         >\n  //            <option value=\"0\">Consumer</option>\n  //            <option value=\"1\">Merchant</option>\n  //         </select>\n  //      </div>\n  //      <p>\n  //        <Link to=\"/auth/login/\">Already have an account?</Link>\n  //       </p>\n  //      </div>\n  //      <SingleModuleButton text=\"Create your account\" type=\"submit\" />\n  //   </Form>\n  ;\n}; // Wrap our form with \"using withFormik HoC\"\n// const RegisterForm = withFormik({\n//    // Transform outer props into form values\n//    mapPropsToValues: props => ({ email: '', name: '', password: '', user_type: '' }),\n//    validationSchema: Yup.object().shape({\n//       name: Yup.string()\n//          .min(1, 'Must have a character')\n//          .max(255, 'Must be shorter than 255')\n//          .required('Must enter a name'),\n//       email: Yup.string()\n//          .required('Email is required')\n//          .email('This is not a valid email'),\n//       password: Yup.string()\n//          .required('Password is required')\n//          .min(6, 'Your password has to be at least 6 characters'),\n//       user_type: Yup.string()\n//          .required('You must select a user type')\n//    }),\n//    // Submission handler\n//    handleSubmit: (values, { props, setStatus }) => {\n//       props.onRegisterSubmit(values.email, values.name, values.password, values.user_type);\n//    }\n// })(InnerForm);\n\n\nexport default RegisterForm;","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Components/Authorization/Register/Form.js"],"names":["React","Link","Input","SingleModuleButton","RegisterForm","props","formElementsArray","key","controls","push","id","config","form","map","formElement","elementType","elementConfig","value","event","inputChangedHandler","valid","touched"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,8CAAlB;AACA,OAAOC,kBAAP,MAA+B,mDAA/B;;AAGA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAE7B,QAAMC,iBAAiB,GAAG,EAA1B;;AACA,OAAK,IAAIC,GAAT,IAAgBF,KAAK,CAACG,QAAtB,EAAgC;AAC5BF,IAAAA,iBAAiB,CAACG,IAAlB,CAAuB;AACnBC,MAAAA,EAAE,EAAEH,GADe;AAEnBI,MAAAA,MAAM,EAAEN,KAAK,CAACG,QAAN,CAAeD,GAAf;AAFW,KAAvB;AAIH;;AAED,QAAMK,IAAI,GAAGN,iBAAiB,CAACO,GAAlB,CAAsBC,WAAW,IAC3C,oBAAC,KAAD;AACG,IAAA,GAAG,EAAEA,WAAW,CAACJ,EADpB;AAEG,IAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmBI,WAFnC;AAGG,IAAA,aAAa,EAAED,WAAW,CAACH,MAAZ,CAAmBK,aAHrC;AAIG,IAAA,KAAK,EAAEF,WAAW,CAACH,MAAZ,CAAmBM,KAJ7B;AAKG,IAAA,OAAO,EAAGC,KAAD,IAAW,KAAKC,mBAAL,CAAyBD,KAAzB,EAAgCJ,WAAW,CAACJ,EAA5C,CALvB;AAMG,IAAA,OAAO,EAAE,CAACI,WAAW,CAACH,MAAZ,CAAmBS,KANhC;AAOG,IAAA,OAAO,EAAEN,WAAW,CAACH,MAAZ,CAAmBU,OAP/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADU,CAAb;AAaA,SAEM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIT,IADJ,EAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,cAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADA,CAFH,EAKG,oBAAC,kBAAD;AACG,IAAA,IAAI,EAAC,qBADR;AAEG,IAAA,IAAI,EAAC,QAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALH,CADH,CAFN,CAeM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/EN;AAkFF,CAzGD,C,CA2GA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA,eAAeR,YAAf","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Input from '../../../Components/UI/FormBoxes/Input/Input';\nimport SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\n\n\nconst RegisterForm = (props) => {\n\n   const formElementsArray = []\n   for (let key in props.controls) {\n       formElementsArray.push({\n           id: key,\n           config: props.controls[key]\n       });\n   }\n\n   const form = formElementsArray.map(formElement => (\n      <Input\n         key={formElement.id}\n         elementType={formElement.config.elementType}\n         elementConfig={formElement.config.elementConfig}\n         value={formElement.config.value} \n         changed={(event) => this.inputChangedHandler(event, formElement.id)}\n         invalid={!formElement.config.valid}\n         touched={formElement.config.touched}\n      />\n     \n   ))\n\n   return (\n\n         <div>\n            <form>\n               {form}\n               <p>\n               <Link to=\"/auth/login/\">Already have an account?</Link>\n               </p>\n               <SingleModuleButton \n                  text=\"Create your account\" \n                  type=\"submit\" \n               />\n            </form>\n         </div>\n    \n         //    <Form className=\"register-form\">\n         //       {JSON.stringify(values)}\n         //       <div>\n         //      <div className=\"form-group\">\n         //         <Field \n         //          type=\"text\"\n         //          name=\"name\"\n         //          placeholder=\"Enter your name\"\n         //          className=\"form-control login-input\"\n         //          onChange={handleChange}\n         //          onBlur={handleBlur}\n         //          value={values.name}\n         //         />\n         //         {touched.name && errors.name && \n         //             <p className=\"field-invalid\">{errors.name}</p>\n         //         }\n         //      </div>\n         //      <div className=\"form-group\">\n         //         <Field \n         //          type=\"email\"\n         //          name=\"email\"\n         //          placeholder=\"Please enter a valid email\"\n         //          className=\"form-control login-input\"\n         //          onChange={handleChange}\n         //          onBlur={handleBlur}\n         //          value={values.email}\n         //         />\n         //         {touched.email && errors.email && \n         //             <p className=\"field-invalid\">{errors.email}</p>\n         //         }\n         //      </div>\n         //      <div className=\"form-group\">\n         //         <Field \n         //          type=\"password\"\n         //          name=\"password\"\n         //          placeholder=\"Choose a password\"\n         //          className=\"form-control password-input\"\n         //          onChange={handleChange}\n         //          onBlur={handleBlur}\n         //          value={values.password}\n         //         />\n         //         {touched.password && errors.password && (\n         //             <p className=\"field-invalid\">{errors.password}</p>\n         //          )}\n         //      </div>\n         //      <div className=\"form-group\">\n         //         <select\n         //          type=\"select\"\n         //          name=\"user_type\"\n         //          placeholder=\"Choose an account type\"\n         //          className=\"form-control\"\n         //          onChange={handleChange}\n         //          onBlur={handleBlur}\n         //          value={values.user_type}\n         //         >\n         //            <option value=\"0\">Consumer</option>\n         //            <option value=\"1\">Merchant</option>\n         //         </select>\n         //      </div>\n         //      <p>\n         //        <Link to=\"/auth/login/\">Already have an account?</Link>\n         //       </p>\n         //      </div>\n         //      <SingleModuleButton text=\"Create your account\" type=\"submit\" />\n         //   </Form>\n      \n   )\n}\n\n// Wrap our form with \"using withFormik HoC\"\n// const RegisterForm = withFormik({\n//    // Transform outer props into form values\n//    mapPropsToValues: props => ({ email: '', name: '', password: '', user_type: '' }),\n\n//    validationSchema: Yup.object().shape({\n//       name: Yup.string()\n//          .min(1, 'Must have a character')\n//          .max(255, 'Must be shorter than 255')\n//          .required('Must enter a name'),\n//       email: Yup.string()\n//          .required('Email is required')\n//          .email('This is not a valid email'),\n//       password: Yup.string()\n//          .required('Password is required')\n//          .min(6, 'Your password has to be at least 6 characters'),\n//       user_type: Yup.string()\n//          .required('You must select a user type')\n//    }),\n\n//    // Submission handler\n//    handleSubmit: (values, { props, setStatus }) => {\n//       props.onRegisterSubmit(values.email, values.name, values.password, values.user_type);\n//    }\n// })(InnerForm);\n\nexport default RegisterForm;\n"]},"metadata":{},"sourceType":"module"}