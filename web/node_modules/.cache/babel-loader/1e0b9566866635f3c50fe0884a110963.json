{"ast":null,"code":"var _jsxFileName = \"/Users/moabdo-business/Desktop/argoswebapp/web/src/components/Authorization/Register/ConsumerForm.js\";\nimport React, { useState } from 'react';\nimport { withStyles, useTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport MuiPhoneNumber from 'material-ui-phone-number';\n\nconst styles = theme => ({\n  Logo: {\n    height: \"7em\",\n    padding: \"10px\"\n  },\n  button: { ...theme.typography.logIn,\n    borderRadius: \"40px\",\n    width: \"15em\",\n    \"&:hover\": {\n      backgroundColor: \"theme.palette.primary.light\",\n      color: \"white\"\n    }\n  }\n}); // const classes = useStyles()\n//    const theme = useTheme()\n\n\nconst innerForm = props => {\n  const {\n    classes,\n    values,\n    errors,\n    touched,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset\n  } = props;\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    container: true,\n    direction: \"column\",\n    style: {\n      maxWidth: \"20em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    required: true,\n    fullWidth: true,\n    label: \"Email\",\n    id: \"email\",\n    type: \"email\",\n    name: \"email\",\n    value: values.email,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    helperText: touched.email && Boolean(errors.email),\n    style: {\n      marginTop: \"2em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })), touched.email && errors.email ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, errors.email) : null, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    required: true,\n    fullWidth: true,\n    label: \"Password\",\n    id: \"password\",\n    name: \"password\",\n    type: \"password\",\n    value: values.password,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    helperText: touched.password && Boolean(errors.password),\n    autoComplete: \"current-password\",\n    style: {\n      marginTop: \"2em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })), touched.password && errors.password ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, errors.password) : null, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(MuiPhoneNumber, {\n    defaultCountry: 'us',\n    fullWidth: true,\n    label: \"Phone Number\",\n    id: \"phone\",\n    disableAreaCodes: true,\n    placeholder: \"(   ) xxx-xxxx\",\n    style: {\n      marginTop: \"2em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    container: true,\n    justify: \"center\",\n    style: {\n      marginTop: \"2em\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Button, {\n    className: classes.button,\n    variant: \"contained\",\n    color: \"secondary\",\n    type: \"submit\",\n    disabled: isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Register\"))))))));\n};\n\nconst consumerForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: ({\n    email,\n    password\n  }) => {\n    return {\n      email: '',\n      password: ''\n    };\n  },\n  // Add a custom validation function (this can be async too!)\n  validationSchema: Yup.object().shape({\n    email: Yup.string().required('Email is required').email('This is not a valid email'),\n    password: Yup.string().required('Password is required').min(6, 'Your password has to be at least 6 characters')\n  }),\n  // Submission handler\n  handleSubmit: (values, {\n    props,\n    setStatus\n  }) => {\n    props.onRegisterSubmit(values.email, values.password);\n  }\n})(innerForm);\nexport default withStyles(styles)(consumerForm); // import React from 'react';\n// import { Link } from 'react-router-dom';\n// import Input from '../../../Components/UI/FormBoxes/Input/Input';\n// import SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\n// const RegisterForm = (props) => {\n//    <Form className=\"register-form\">\n//       {JSON.stringify(values)}\n//       <div>\n//      <div className=\"form-group\">\n//         <Field \n//          type=\"text\"\n//          name=\"name\"\n//          placeholder=\"Enter your name\"\n//          className=\"form-control login-input\"\n//          onChange={handleChange}\n//          onBlur={handleBlur}\n//          value={values.name}\n//         />\n//         {touched.name && errors.name && \n//             <p className=\"field-invalid\">{errors.name}</p>\n//         }\n//      </div>\n//      <div className=\"form-group\">\n//         <Field \n//          type=\"email\"\n//          name=\"email\"\n//          placeholder=\"Please enter a valid email\"\n//          className=\"form-control login-input\"\n//          onChange={handleChange}\n//          onBlur={handleBlur}\n//          value={values.email}\n//         />\n//         {touched.email && errors.email && \n//             <p className=\"field-invalid\">{errors.email}</p>\n//         }\n//      </div>\n//      <div className=\"form-group\">\n//         <Field \n//          type=\"password\"\n//          name=\"password\"\n//          placeholder=\"Choose a password\"\n//          className=\"form-control password-input\"\n//          onChange={handleChange}\n//          onBlur={handleBlur}\n//          value={values.password}\n//         />\n//         {touched.password && errors.password && (\n//             <p className=\"field-invalid\">{errors.password}</p>\n//          )}\n//      </div>\n//      <div className=\"form-group\">\n//         <select\n//          type=\"select\"\n//          name=\"user_type\"\n//          placeholder=\"Choose an account type\"\n//          className=\"form-control\"\n//          onChange={handleChange}\n//          onBlur={handleBlur}\n//          value={values.user_type}\n//         >\n//            <option value=\"0\">Consumer</option>\n//            <option value=\"1\">Merchant</option>\n//         </select>\n//      </div>\n//      <p>\n//        <Link to=\"/auth/login/\">Already have an account?</Link>\n//       </p>\n//      </div>\n//      <SingleModuleButton text=\"Create your account\" type=\"submit\" />\n//   </Form>\n//    )\n// }\n// Wrap our form with \"using withFormik HoC\"\n// const RegisterForm = withFormik({\n//    // Transform outer props into form values\n//    mapPropsToValues: props => ({ email: '', name: '', password: '', user_type: '' }),\n//    validationSchema: Yup.object().shape({\n//       name: Yup.string()\n//          .min(1, 'Must have a character')\n//          .max(255, 'Must be shorter than 255')\n//          .required('Must enter a name'),\n//       email: Yup.string()\n//          .required('Email is required')\n//          .email('This is not a valid email'),\n//       password: Yup.string()\n//          .required('Password is required')\n//          .min(6, 'Your password has to be at least 6 characters'),\n//       user_type: Yup.string()\n//          .required('You must select a user type')\n//    }),\n//    // Submission handler\n//    handleSubmit: (values, { props, setStatus }) => {\n//       props.onRegisterSubmit(values.email, values.name, values.password, values.user_type);\n//    }\n// })(InnerForm);\n// export default RegisterForm;","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/components/Authorization/Register/ConsumerForm.js"],"names":["React","useState","withStyles","useTheme","Grid","Button","TextField","withFormik","Yup","MuiPhoneNumber","styles","theme","Logo","height","padding","button","typography","logIn","borderRadius","width","backgroundColor","color","innerForm","props","classes","values","errors","touched","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","maxWidth","email","Boolean","marginTop","password","consumerForm","mapPropsToValues","validationSchema","object","shape","string","required","min","setStatus","onRegisterSubmit"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAoC,0BAApC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AAEA,SAASC,UAAT,QAA2B,QAA3B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,OAAOC,cAAP,MAA2B,0BAA3B;;AAGA,MAAMC,MAAM,GAAGC,KAAK,KAAK;AACtBC,EAAAA,IAAI,EAAE;AACHC,IAAAA,MAAM,EAAE,KADL;AAEHC,IAAAA,OAAO,EAAE;AAFN,GADgB;AAKrBC,EAAAA,MAAM,EAAE,EACN,GAAGJ,KAAK,CAACK,UAAN,CAAiBC,KADd;AAENC,IAAAA,YAAY,EAAE,MAFR;AAGNC,IAAAA,KAAK,EAAE,MAHD;AAIN,eAAW;AACTC,MAAAA,eAAe,EAAE,6BADR;AAETC,MAAAA,KAAK,EAAE;AAFE;AAJL;AALa,CAAL,CAApB,C,CAeA;AACA;;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AAGxB,QAAM;AAAEC,IAAAA,OAAF;AACHC,IAAAA,MADG;AAEHC,IAAAA,MAFG;AAGHC,IAAAA,OAHG;AAIHC,IAAAA,YAJG;AAKHC,IAAAA,YALG;AAMHC,IAAAA,UANG;AAOHC,IAAAA,YAPG;AAQHC,IAAAA;AARG,MASAT,KATN;AAYA,SACG,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,SAAS,EAAC,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,SAAS,MAApB;AAAqB,IAAA,SAAS,EAAC,QAA/B;AAAwC,IAAA,OAAO,EAAC,QAAhD;AAAyD,IAAA,UAAU,EAAC,QAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,SAAS,EAAC,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,SAAS,MAApB;AAAqB,IAAA,SAAS,EAAC,QAA/B;AAAwC,IAAA,KAAK,EAAE;AAACU,MAAAA,QAAQ,EAAE;AAAX,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAM,IAAA,QAAQ,EAAEF,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,SAAD;AACG,IAAA,QAAQ,MADX;AAEG,IAAA,SAAS,MAFZ;AAGG,IAAA,KAAK,EAAC,OAHT;AAIG,IAAA,EAAE,EAAC,OAJN;AAKG,IAAA,IAAI,EAAC,OALR;AAMG,IAAA,IAAI,EAAC,OANR;AAOG,IAAA,KAAK,EAAEN,MAAM,CAACS,KAPjB;AAQG,IAAA,QAAQ,EAAEL,YARb;AASG,IAAA,MAAM,EAAEC,UATX;AAUG,IAAA,UAAU,EAAEH,OAAO,CAACO,KAAR,IAAiBC,OAAO,CAACT,MAAM,CAACQ,KAAR,CAVvC;AAWG,IAAA,KAAK,EAAE;AAACE,MAAAA,SAAS,EAAE;AAAZ,KAXV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CADH,EAgBOT,OAAO,CAACO,KAAR,IAAiBR,MAAM,CAACQ,KAAxB,GAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMR,MAAM,CAACQ,KAAb,CAAjC,GAA8D,IAhBrE,EAiBG,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,SAAD;AACG,IAAA,QAAQ,MADX;AAEG,IAAA,SAAS,MAFZ;AAGG,IAAA,KAAK,EAAC,UAHT;AAIG,IAAA,EAAE,EAAC,UAJN;AAKG,IAAA,IAAI,EAAC,UALR;AAMG,IAAA,IAAI,EAAC,UANR;AAOG,IAAA,KAAK,EAAET,MAAM,CAACY,QAPjB;AAQG,IAAA,QAAQ,EAAER,YARb;AASG,IAAA,MAAM,EAAEC,UATX;AAUG,IAAA,UAAU,EAAEH,OAAO,CAACU,QAAR,IAAoBF,OAAO,CAACT,MAAM,CAACW,QAAR,CAV1C;AAWG,IAAA,YAAY,EAAC,kBAXhB;AAYG,IAAA,KAAK,EAAE;AAACD,MAAAA,SAAS,EAAE;AAAZ,KAZV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CAjBH,EAiCOT,OAAO,CAACU,QAAR,IAAoBX,MAAM,CAACW,QAA3B,GAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMX,MAAM,CAACW,QAAb,CAAvC,GAAuE,IAjC9E,EAkCG,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,cAAD;AACG,IAAA,cAAc,EAAE,IADnB;AAEG,IAAA,SAAS,MAFZ;AAGG,IAAA,KAAK,EAAC,cAHT;AAIG,IAAA,EAAE,EAAC,OAJN;AAKG,IAAA,gBAAgB,MALnB;AAOG,IAAA,WAAW,EAAC,gBAPf;AAQG,IAAA,KAAK,EAAE;AAACD,MAAAA,SAAS,EAAE;AAAZ,KARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CAlCH,EA8CG,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,SAAS,MAApB;AAAqB,IAAA,OAAO,EAAC,QAA7B;AAAsC,IAAA,KAAK,EAAE;AAAEA,MAAAA,SAAS,EAAE;AAAb,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,oBAAC,MAAD;AACG,IAAA,SAAS,EAAEZ,OAAO,CAACT,MADtB;AAEG,IAAA,OAAO,EAAE,WAFZ;AAGG,IAAA,KAAK,EAAC,WAHT;AAIG,IAAA,IAAI,EAAC,QAJR;AAKG,IAAA,QAAQ,EAAEa,YALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADH,CA9CH,CADH,CADH,CADH,CADH,CADH,CADH;AAuEF,CAtFD;;AAwFA,MAAMU,YAAY,GAAG/B,UAAU,CAAC;AAC7B;AACAgC,EAAAA,gBAAgB,EAAE,CAAC;AACbL,IAAAA,KADa;AAEbG,IAAAA;AAFa,GAAD,KAGT;AACH,WAAO;AACJH,MAAAA,KAAK,EAAE,EADH;AAEJG,MAAAA,QAAQ,EAAE;AAFN,KAAP;AAIF,GAVyB;AAY7B;AACAG,EAAAA,gBAAgB,EAAEhC,GAAG,CAACiC,MAAJ,GAAaC,KAAb,CAAmB;AAClCR,IAAAA,KAAK,EAAE1B,GAAG,CAACmC,MAAJ,GACHC,QADG,CACM,mBADN,EAEHV,KAFG,CAEG,2BAFH,CAD2B;AAIlCG,IAAAA,QAAQ,EAAE7B,GAAG,CAACmC,MAAJ,GACNC,QADM,CACG,sBADH,EAENC,GAFM,CAEF,CAFE,EAEC,+CAFD;AAJwB,GAAnB,CAbW;AAsB7B;AACAd,EAAAA,YAAY,EAAE,CAACN,MAAD,EAAS;AAAEF,IAAAA,KAAF;AAASuB,IAAAA;AAAT,GAAT,KAAkC;AAC7CvB,IAAAA,KAAK,CAACwB,gBAAN,CAAuBtB,MAAM,CAACS,KAA9B,EAAqCT,MAAM,CAACY,QAA5C;AACF;AAzB4B,CAAD,CAAV,CA0BlBf,SA1BkB,CAArB;AA4BA,eAAepB,UAAU,CAACQ,MAAD,CAAV,CAAmB4B,YAAnB,CAAf,C,CAQA;AACA;AACA;AACA;AAGA;AAIS;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAET;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, {useState} from 'react';\nimport { withStyles, useTheme} from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nimport { withFormik } from 'formik';\nimport * as Yup from 'yup';\n\nimport MuiPhoneNumber from 'material-ui-phone-number';\n\n\nconst styles = theme => ({\n   Logo: {\n      height: \"7em\",\n      padding: \"10px\",\n    },\n    button: {\n      ...theme.typography.logIn,\n      borderRadius: \"40px\",\n      width: \"15em\",\n      \"&:hover\": {\n        backgroundColor: \"theme.palette.primary.light\",\n        color: \"white\"\n        }  \n    }\n})\n// const classes = useStyles()\n//    const theme = useTheme()\n\nconst innerForm = props => {\n   \n\n   const { classes,\n      values,  \n      errors, \n      touched,\n      isSubmitting,\n      handleChange,\n      handleBlur,\n      handleSubmit,\n      handleReset\n     } = props;\n\n\n   return (\n      <Grid container direction=\"row\">\n         <Grid item container direction=\"column\" justify=\"center\" alignItems=\"center\">\n            <Grid item>\n               <Grid container direction=\"column\">\n                  <Grid item container direction=\"column\" style={{maxWidth: \"20em\"}}>\n                     <form onSubmit={handleSubmit}>\n                        <Grid item>\n                           <TextField \n                              required\n                              fullWidth\n                              label=\"Email\" \n                              id=\"email\"\n                              type=\"email\"\n                              name=\"email\"\n                              value={values.email}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              helperText={touched.email && Boolean(errors.email)}\n                              style={{marginTop: \"2em\"}} \n                           />\n                        </Grid>\n                           {touched.email && errors.email ? (<div>{errors.email}</div>) : null}\n                        <Grid item>\n                           <TextField \n                              required\n                              fullWidth\n                              label=\"Password\" \n                              id=\"password\"\n                              name=\"password\"         \n                              type=\"password\"\n                              value={values.password}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              helperText={touched.password && Boolean(errors.password)}\n                              autoComplete=\"current-password\"\n                              style={{marginTop: \"2em\"}}\n                           />\n                        </Grid>\n                           {touched.password && errors.password ? (<div>{errors.password}</div>) : null}\n                        <Grid item>\n                           <MuiPhoneNumber\n                              defaultCountry={'us'} \n                              fullWidth\n                              label=\"Phone Number\" \n                              id=\"phone\" \n                              disableAreaCodes\n                           \n                              placeholder=\"(   ) xxx-xxxx\"\n                              style={{marginTop: \"2em\"}}\n                           />\n                        </Grid>\n                        <Grid item container justify=\"center\" style={{ marginTop: \"2em\" }}>\n                           <Button \n                              className={classes.button} \n                              variant= \"contained\" \n                              color=\"secondary\"\n                              type=\"submit\"\n                              disabled={isSubmitting} \n                              >\n                                 Register\n                           </Button>\n                        </Grid>\n                     </ form>\n                  </Grid>\n                 \n               </Grid>\n            </Grid>\n         </Grid>\n      </Grid>\n   )\n}\n\nconst consumerForm = withFormik({\n   // Transform outer props into form values\n   mapPropsToValues: ({ \n         email,\n         password \n      }) => {\n         return {\n            email: '',\n            password: ''\n         };\n      },\n\n   // Add a custom validation function (this can be async too!)\n   validationSchema: Yup.object().shape({\n      email: Yup.string()\n         .required('Email is required')\n         .email('This is not a valid email'),\n      password: Yup.string()\n         .required('Password is required')\n         .min(6, 'Your password has to be at least 6 characters')\n   }),\n\n   // Submission handler\n   handleSubmit: (values, { props, setStatus }) => {\n      props.onRegisterSubmit(values.email, values.password)\n   }\n})(innerForm);\n\nexport default withStyles(styles)(consumerForm);\n\n\n\n\n\n\n\n// import React from 'react';\n// import { Link } from 'react-router-dom';\n// import Input from '../../../Components/UI/FormBoxes/Input/Input';\n// import SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\n\n\n// const RegisterForm = (props) => {\n\n  \n    \n         //    <Form className=\"register-form\">\n         //       {JSON.stringify(values)}\n         //       <div>\n         //      <div className=\"form-group\">\n         //         <Field \n         //          type=\"text\"\n         //          name=\"name\"\n         //          placeholder=\"Enter your name\"\n         //          className=\"form-control login-input\"\n         //          onChange={handleChange}\n         //          onBlur={handleBlur}\n         //          value={values.name}\n         //         />\n         //         {touched.name && errors.name && \n         //             <p className=\"field-invalid\">{errors.name}</p>\n         //         }\n         //      </div>\n         //      <div className=\"form-group\">\n         //         <Field \n         //          type=\"email\"\n         //          name=\"email\"\n         //          placeholder=\"Please enter a valid email\"\n         //          className=\"form-control login-input\"\n         //          onChange={handleChange}\n         //          onBlur={handleBlur}\n         //          value={values.email}\n         //         />\n         //         {touched.email && errors.email && \n         //             <p className=\"field-invalid\">{errors.email}</p>\n         //         }\n         //      </div>\n         //      <div className=\"form-group\">\n         //         <Field \n         //          type=\"password\"\n         //          name=\"password\"\n         //          placeholder=\"Choose a password\"\n         //          className=\"form-control password-input\"\n         //          onChange={handleChange}\n         //          onBlur={handleBlur}\n         //          value={values.password}\n         //         />\n         //         {touched.password && errors.password && (\n         //             <p className=\"field-invalid\">{errors.password}</p>\n         //          )}\n         //      </div>\n         //      <div className=\"form-group\">\n         //         <select\n         //          type=\"select\"\n         //          name=\"user_type\"\n         //          placeholder=\"Choose an account type\"\n         //          className=\"form-control\"\n         //          onChange={handleChange}\n         //          onBlur={handleBlur}\n         //          value={values.user_type}\n         //         >\n         //            <option value=\"0\">Consumer</option>\n         //            <option value=\"1\">Merchant</option>\n         //         </select>\n         //      </div>\n         //      <p>\n         //        <Link to=\"/auth/login/\">Already have an account?</Link>\n         //       </p>\n         //      </div>\n         //      <SingleModuleButton text=\"Create your account\" type=\"submit\" />\n         //   </Form>\n      \n//    )\n// }\n\n// Wrap our form with \"using withFormik HoC\"\n// const RegisterForm = withFormik({\n//    // Transform outer props into form values\n//    mapPropsToValues: props => ({ email: '', name: '', password: '', user_type: '' }),\n\n//    validationSchema: Yup.object().shape({\n//       name: Yup.string()\n//          .min(1, 'Must have a character')\n//          .max(255, 'Must be shorter than 255')\n//          .required('Must enter a name'),\n//       email: Yup.string()\n//          .required('Email is required')\n//          .email('This is not a valid email'),\n//       password: Yup.string()\n//          .required('Password is required')\n//          .min(6, 'Your password has to be at least 6 characters'),\n//       user_type: Yup.string()\n//          .required('You must select a user type')\n//    }),\n\n//    // Submission handler\n//    handleSubmit: (values, { props, setStatus }) => {\n//       props.onRegisterSubmit(values.email, values.name, values.password, values.user_type);\n//    }\n// })(InnerForm);\n\n// export default RegisterForm;\n"]},"metadata":{},"sourceType":"module"}