{"ast":null,"code":"var _jsxFileName = \"/Users/moabdo-business/Desktop/argoswebapp/web/src/Components/Authorization/Register/Form.js\";\nimport React from 'react';\nimport { Form, Formik, Field, withFormik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton'; // const InnerForm = props => {\n//    const { errors, touched } = props;\n//    return (\n//       <Form className=\"register-form\">\n//          <div>\n//          <div className=\"form-group\">\n//                <Field\n//                   type=\"email\"\n//                   className=\"form-control login-input\"\n//                   name=\"email\"\n//                   placeholder=\"Enter a valid email...\"\n//                />\n//                {touched.email && errors.email && <p className=\"field-invalid\">{errors.email}</p>}\n//             </div>\n//             <div className=\"form-group\">\n//                <Field\n//                   type=\"password\"\n//                   className=\"form-control password-input\"\n//                   name=\"password\"\n//                   placeholder=\"Set a password...\"\n//                />\n//                {touched.password && errors.password && (\n//                   <p className=\"field-invalid\">{errors.password}</p>\n//                )}\n//             </div>\n//             <div className=\"form-group\">\n//                <Field\n//                   as=\"select\"\n//                   className=\"form-control\"\n//                   name=\"user_type\"\n//                   placeholder=\"Select account type\"\n//                >\n//                   <option value=\"0\">Consumer</option>\n//                   <option value=\"1\">Merchant</option>\n//                </Field>\n//                {touched.password && errors.password && (\n//                   <p className=\"field-invalid\">{errors.password}</p>\n//                )}\n//             </div>\n//             <p>\n//                <Link to=\"/login\">Already have an account?</Link>\n//             </p>\n//          </div>\n//          <SingleModuleButton text=\"Create your account\" type=\"submit\" />\n//       </Form>\n//    );\n// };\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().min(1, 'Must have a character').max(255, 'Must be shorter than 255').required('Must enter a name'),\n  email: Yup.string().required('Email is required').email('This is not a valid email'),\n  password: Yup.string().required('Password is required').min(6, 'Your password has to be at least 6 characters'),\n  user_type: Yup.string().required('You must select a user type')\n});\n\nconst InnerForm = props => {\n  const {\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur\n  } = props;\n  return React.createElement(Form, {\n    className: \"register-form\",\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n      user_type: 0\n    },\n    validationSchema: validationSchema,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, JSON.stringify(values), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Enter your name\",\n    className: \"form-control login-input\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), touched.name && errors.name && React.createElement(\"p\", {\n    className: \"field-invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, errors.name)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Please enter a valid email\",\n    className: \"form-control login-input\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.email,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), touched.email && errors.email && React.createElement(\"p\", {\n    className: \"field-invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, errors.email)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    placeholder: \"Choose a password\",\n    className: \"form-control password-input\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), touched.password && errors.password && React.createElement(\"p\", {\n    className: \"field-invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, errors.password)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"select\", {\n    type: \"select\",\n    name: \"user_type\",\n    placeholder: \"Choose an account type\",\n    className: \"form-control\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.user_type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"Consumer\"), React.createElement(\"option\", {\n    value: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"Merchant\")))), React.createElement(SingleModuleButton, {\n    text: \"Create your account\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }));\n}; // Wrap our form with the using withFormik HoC\n\n\nconst RegisterForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({\n    email: '',\n    name: '',\n    password: '',\n    user_type: ''\n  }),\n  // Submission handler\n  handleSubmit: (values, {\n    props,\n    setStatus\n  }) => {\n    alert(JSON.stringify(values, null, 2));\n    props.onRegisterSubmit(values.email, values.name, values.password, values.user_type);\n  }\n})(InnerForm);\nexport default RegisterForm;","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Components/Authorization/Register/Form.js"],"names":["React","Form","Formik","Field","withFormik","Link","Yup","SingleModuleButton","validationSchema","object","shape","name","string","min","max","required","email","password","user_type","InnerForm","props","values","errors","touched","handleChange","handleBlur","JSON","stringify","RegisterForm","mapPropsToValues","handleSubmit","setStatus","alert","onRegisterSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Formik, Field, withFormik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\n\n// const InnerForm = props => {\n//    const { errors, touched } = props;\n\n//    return (\n//       <Form className=\"register-form\">\n//          <div>\n//          <div className=\"form-group\">\n//                <Field\n//                   type=\"email\"\n//                   className=\"form-control login-input\"\n//                   name=\"email\"\n//                   placeholder=\"Enter a valid email...\"\n//                />\n//                {touched.email && errors.email && <p className=\"field-invalid\">{errors.email}</p>}\n//             </div>\n\n//             <div className=\"form-group\">\n//                <Field\n//                   type=\"password\"\n//                   className=\"form-control password-input\"\n//                   name=\"password\"\n//                   placeholder=\"Set a password...\"\n//                />\n//                {touched.password && errors.password && (\n//                   <p className=\"field-invalid\">{errors.password}</p>\n//                )}\n//             </div>\n//             <div className=\"form-group\">\n//                <Field\n//                   as=\"select\"\n//                   className=\"form-control\"\n//                   name=\"user_type\"\n//                   placeholder=\"Select account type\"\n//                >\n//                   <option value=\"0\">Consumer</option>\n//                   <option value=\"1\">Merchant</option>\n//                </Field>\n//                {touched.password && errors.password && (\n//                   <p className=\"field-invalid\">{errors.password}</p>\n//                )}\n//             </div>\n//             <p>\n//                <Link to=\"/login\">Already have an account?</Link>\n//             </p>\n//          </div>\n\n//          <SingleModuleButton text=\"Create your account\" type=\"submit\" />\n//       </Form>\n//    );\n// };\n\nconst validationSchema = Yup.object().shape({\n      name: Yup.string()\n         .min(1, 'Must have a character')\n         .max(255, 'Must be shorter than 255')\n         .required('Must enter a name'),\n      email: Yup.string()\n         .required('Email is required')\n         .email('This is not a valid email'),\n      password: Yup.string()\n         .required('Password is required')\n         .min(6, 'Your password has to be at least 6 characters'),\n      user_type: Yup.string()\n         .required('You must select a user type')\n   })\n\nconst InnerForm = (props) => {\n\n   const { values, errors, touched, handleChange, handleBlur} = props;\n\n   return (\n    \n            <Form className=\"register-form\" initialValues={{ name: '', email: '', password: '', user_type: 0 }} validationSchema={validationSchema}>\n               {JSON.stringify(values)}\n               <div>\n              <div className=\"form-group\">\n                 <input \n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Enter your name\"\n                  className=\"form-control login-input\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.name}\n                 />\n                 {touched.name && errors.name && \n                     <p className=\"field-invalid\">{errors.name}</p>\n                 }\n              </div>\n              <div className=\"form-group\">\n                 <input \n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Please enter a valid email\"\n                  className=\"form-control login-input\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.email}\n                 />\n                 {touched.email && errors.email && \n                     <p className=\"field-invalid\">{errors.email}</p>\n                 }\n              </div>\n              <div className=\"form-group\">\n                 <input \n                  type=\"password\"\n                  name=\"password\"\n                  placeholder=\"Choose a password\"\n                  className=\"form-control password-input\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.password}\n                 />\n                 {touched.password && errors.password && (\n                     <p className=\"field-invalid\">{errors.password}</p>\n                  )}\n              </div>\n              <div className=\"form-group\">\n                 <select\n                  type=\"select\"\n                  name=\"user_type\"\n                  placeholder=\"Choose an account type\"\n                  className=\"form-control\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.user_type}\n                 >\n                    <option value=\"0\">Consumer</option>\n                    <option value=\"1\">Merchant</option>\n                 </select>\n              </div>\n              </div>\n              <SingleModuleButton text=\"Create your account\" type=\"submit\" />\n           </Form>\n      \n   )\n}\n\n// Wrap our form with the using withFormik HoC\nconst RegisterForm = withFormik({\n   // Transform outer props into form values\n   mapPropsToValues: props => ({ email: '', name: '', password: '', user_type: '' }),\n\n   // Submission handler\n   handleSubmit: (values, { props, setStatus }) => {\n      alert(JSON.stringify(values, null, 2))\n      props.onRegisterSubmit(values.email, values.name, values.password, values.user_type);\n   }\n})(InnerForm);\n\nexport default RegisterForm;\n"]},"metadata":{},"sourceType":"module"}