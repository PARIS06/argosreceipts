{"ast":null,"code":"// import { getMyTransfers, createTransfer } from 'api/transfers';\n// import * as actionTypes from './actionTypes';\n// export const fetchTransfers = () => async dispatch => {\n//    try {\n//       // Set status to false on every start, so it can be reusable\n//       dispatch(fetchTransfersStatus(false));\n//       const data = await getMyTransfers();\n//       if (!data) {\n//          dispatch(fetchTransfersStatus(false));\n//          return;\n//       }\n//       dispatch({ type: actionTypes.FETCH_TRANSFERS, data });\n//    } catch (err) {\n//       dispatch(fetchTransfersStatus(false));\n//    }\n// };\n// export const fetchTransfersStatus = status => ({\n//    type: actionTypes.FETCH_TRANSFERS_STATUS,\n//    status\n// });\n// export const addTransfer = data => async dispatch => {\n//    try {\n//       const transData = {\n//          ...data,\n//          amount: parseFloat(data.amount).toFixed(2),\n//          date: new Date(),\n//          payeeAccNumber: parseInt(data.payeeAccNumber, 10),\n//          payeeSortcode: parseInt(data.payeeSortcode, 10),\n//          status: 'Done',\n//          type: 'Transfer'\n//       };\n//       const transfer = await createTransfer(transData);\n//       if (!transfer) {\n//          dispatch(fetchTransfersStatus(false));\n//          return;\n//       }\n//       dispatch({\n//          type: actionTypes.ADD_TRANSFER,\n//          data: transData\n//       });\n//    } catch (err) {\n//       dispatch(fetchTransfersStatus(false));\n//    }\n// };","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Store/Actions/transfers.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { getMyTransfers, createTransfer } from 'api/transfers';\n// import * as actionTypes from './actionTypes';\n\n// export const fetchTransfers = () => async dispatch => {\n//    try {\n//       // Set status to false on every start, so it can be reusable\n//       dispatch(fetchTransfersStatus(false));\n\n//       const data = await getMyTransfers();\n\n//       if (!data) {\n//          dispatch(fetchTransfersStatus(false));\n//          return;\n//       }\n\n//       dispatch({ type: actionTypes.FETCH_TRANSFERS, data });\n//    } catch (err) {\n//       dispatch(fetchTransfersStatus(false));\n//    }\n// };\n\n// export const fetchTransfersStatus = status => ({\n//    type: actionTypes.FETCH_TRANSFERS_STATUS,\n//    status\n// });\n\n// export const addTransfer = data => async dispatch => {\n//    try {\n//       const transData = {\n//          ...data,\n//          amount: parseFloat(data.amount).toFixed(2),\n//          date: new Date(),\n//          payeeAccNumber: parseInt(data.payeeAccNumber, 10),\n//          payeeSortcode: parseInt(data.payeeSortcode, 10),\n//          status: 'Done',\n//          type: 'Transfer'\n//       };\n\n//       const transfer = await createTransfer(transData);\n\n//       if (!transfer) {\n//          dispatch(fetchTransfersStatus(false));\n//          return;\n//       }\n\n//       dispatch({\n//          type: actionTypes.ADD_TRANSFER,\n//          data: transData\n//       });\n//    } catch (err) {\n//       dispatch(fetchTransfersStatus(false));\n//    }\n// };\n"]},"metadata":{},"sourceType":"module"}