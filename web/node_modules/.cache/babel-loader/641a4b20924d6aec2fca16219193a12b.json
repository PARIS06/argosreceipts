{"ast":null,"code":"var _jsxFileName = \"/Users/moabdo-business/Desktop/argoswebapp/web/src/Components/Cards/PINChange/Form.js\";\nimport React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport '../../../Tools/validations/YupCustomValidations';\nimport SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\n\nconst InnerForm = props => {\n  const {\n    errors,\n    touched\n  } = props;\n  return React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"pin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Enter new PIN\"), React.createElement(Field, {\n    type: \"text\",\n    id: \"pin\",\n    className: \"form-control\",\n    name: \"pin\",\n    maxLength: \"4\",\n    placeholder: \"Enter new PIN...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), touched.pin && errors.pin && React.createElement(\"p\", {\n    className: \"field-invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, errors.pin)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"pin-conf\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Confirm new PIN\"), React.createElement(Field, {\n    type: \"text\",\n    id: \"pin-conf\",\n    className: \"form-control\",\n    name: \"pinConf\",\n    maxLength: \"4\",\n    placeholder: \"Confirm new PIN...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), touched.pinConf && errors.pinConf && React.createElement(\"p\", {\n    className: \"field-invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, errors.pinConf)), React.createElement(\"p\", {\n    className: \"validation-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, props.status)), React.createElement(SingleModuleButton, {\n    text: \"Change PIN\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }));\n};\n\nconst PINChangeForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({\n    pin: '',\n    pinConf: ''\n  }),\n  validationSchema: Yup.object().shape({\n    pin: Yup.number().typeError('PIN must be a number').positive('Please enter a positive number').integer('PIN must be an integer').length(4, 'PIN must be 4 numbers'),\n    pinConf: Yup.number() // When PIN has any value, activate pinConf validations\n    .when('pin', {\n      is: val => val && val.toString().length > 0,\n      then: Yup.number().required('Please confirm your PIN').typeError('PIN confirmation must be a number').oneOf([Yup.ref('pin')], 'PINs must be the same')\n    })\n  }),\n  // Submission handler\n  handleSubmit: (values, {\n    props,\n    setStatus\n  }) => {\n    const pin = parseInt(values.pin, 10);\n\n    if (!pin) {\n      setStatus('No PIN changed');\n      return;\n    }\n\n    setStatus('Sending...');\n    props.changeCardPin(pin).then(data => setStatus('PIN successfully changed!')).catch(error => setStatus('Problems, try again...'));\n  }\n})(InnerForm);\nexport default PINChangeForm;","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Components/Cards/PINChange/Form.js"],"names":["React","Form","Field","withFormik","Yup","SingleModuleButton","InnerForm","props","errors","touched","pin","pinConf","status","PINChangeForm","mapPropsToValues","validationSchema","object","shape","number","typeError","positive","integer","length","when","is","val","toString","then","required","oneOf","ref","handleSubmit","values","setStatus","parseInt","changeCardPin","data","catch","error"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport * as Yup from 'yup';\nimport '../../../Tools/validations/YupCustomValidations';\nimport SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\n\nconst InnerForm = props => {\n   const { errors, touched } = props;\n\n   return (\n      <Form>\n         <div>\n            <div className=\"form-group\">\n               <label htmlFor=\"pin\">Enter new PIN</label>\n\n               <Field\n                  type=\"text\"\n                  id=\"pin\"\n                  className=\"form-control\"\n                  name=\"pin\"\n                  maxLength=\"4\"\n                  placeholder=\"Enter new PIN...\"\n               />\n               {touched.pin && errors.pin && <p className=\"field-invalid\">{errors.pin}</p>}\n            </div>\n\n            <div className=\"form-group\">\n               <label htmlFor=\"pin-conf\">Confirm new PIN</label>\n\n               <Field\n                  type=\"text\"\n                  id=\"pin-conf\"\n                  className=\"form-control\"\n                  name=\"pinConf\"\n                  maxLength=\"4\"\n                  placeholder=\"Confirm new PIN...\"\n               />\n               {touched.pinConf && errors.pinConf && (\n                  <p className=\"field-invalid\">{errors.pinConf}</p>\n               )}\n            </div>\n\n            <p className=\"validation-info\">{props.status}</p>\n         </div>\n\n         <SingleModuleButton text=\"Change PIN\" type=\"submit\" />\n      </Form>\n   );\n};\n\nconst PINChangeForm = withFormik({\n   // Transform outer props into form values\n   mapPropsToValues: props => ({ pin: '', pinConf: '' }),\n\n   validationSchema: Yup.object().shape({\n      pin: Yup.number()\n         .typeError('PIN must be a number')\n         .positive('Please enter a positive number')\n         .integer('PIN must be an integer')\n         .length(4, 'PIN must be 4 numbers'),\n\n      pinConf: Yup.number()\n         // When PIN has any value, activate pinConf validations\n         .when('pin', {\n            is: val => val && val.toString().length > 0,\n            then: Yup.number()\n               .required('Please confirm your PIN')\n               .typeError('PIN confirmation must be a number')\n               .oneOf([Yup.ref('pin')], 'PINs must be the same')\n         })\n   }),\n\n   // Submission handler\n   handleSubmit: (values, { props, setStatus }) => {\n      const pin = parseInt(values.pin, 10);\n\n      if (!pin) {\n         setStatus('No PIN changed');\n         return;\n      }\n\n      setStatus('Sending...');\n\n      props\n         .changeCardPin(pin)\n         .then(data => setStatus('PIN successfully changed!'))\n         .catch(error => setStatus('Problems, try again...'));\n   }\n})(InnerForm);\n\nexport default PINChangeForm;\n"]},"metadata":{},"sourceType":"module"}