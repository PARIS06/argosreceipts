{"ast":null,"code":"var _jsxFileName = \"/Users/moabdo-business/Desktop/argoswebapp/web/src/Components/Authorization/Login/Form.js\";\nimport React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\n\nconst InnerForm = props => {\n  const {\n    errors,\n    touched\n  } = props;\n  return React.createElement(Form, {\n    className: \"login-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"email\",\n    className: \"form-control login-input\",\n    name: \"email\",\n    placeholder: \"Your email...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }), touched.email && errors.email && React.createElement(\"p\", {\n    className: \"field-invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, errors.email)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"password\",\n    className: \"form-control password-input\",\n    name: \"password\",\n    placeholder: \"Your password...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, touched.password && errors.password && React.createElement(\"p\", {\n    className: \"field-invalid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, errors.password))), React.createElement(\"div\", {\n    className: \"checkbox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"checkbox\",\n    name: \"remember\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), \"Keep me signed in\")), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/auth/create-user/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Don't have an account?\"))), React.createElement(SingleModuleButton, {\n    text: \"Log in now\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }));\n}; // Wrap our form with the using withFormik HoC\n\n\nconst LoginForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({\n    email: '',\n    password: ''\n  }),\n  // Add a custom validation function (this can be async too!)\n  validationSchema: Yup.object().shape({\n    email: Yup.string().required('Email is required').email('This is not a valid email'),\n    password: Yup.string().required('Password is required').min(6, 'Your password has to be at least 6 characters')\n  }),\n  // Submission handler\n  handleSubmit: (values, {\n    props,\n    setStatus\n  }) => {\n    props.onLoginSubmit(values.email, values.password);\n  }\n})(InnerForm);\nexport default LoginForm;","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Components/Authorization/Login/Form.js"],"names":["React","Form","Field","withFormik","Link","Yup","SingleModuleButton","InnerForm","props","errors","touched","email","password","LoginForm","mapPropsToValues","validationSchema","object","shape","string","required","min","handleSubmit","values","setStatus","onLoginSubmit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Field, withFormik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\n\nconst InnerForm = props => {\n   const { errors, touched } = props;\n\n   return (\n      <Form className=\"login-form\">\n         <div>\n            <div className=\"form-group\">\n               <Field\n                  type=\"email\"\n                  className=\"form-control login-input\"\n                  name=\"email\"\n                  placeholder=\"Your email...\"\n               />\n               {touched.email && errors.email && <p className=\"field-invalid\">{errors.email}</p>}\n            </div>\n\n            <div className=\"form-group\">\n               <input\n                  type=\"password\"\n                  className=\"form-control password-input\"\n                  name=\"password\"\n                  placeholder=\"Your password...\"\n               >\n               {touched.password && errors.password && (\n                  <p className=\"field-invalid\">{errors.password}</p>\n               )}\n               </input>\n            </div>\n\n            <div className=\"checkbox\">\n               <label>\n                  <Field type=\"checkbox\" name=\"remember\" />\n                  Keep me signed in\n               </label>\n            </div>\n\n            <p>\n               <Link to=\"/auth/create-user/\">Don't have an account?</Link>\n            </p>\n         </div>\n\n         <SingleModuleButton text=\"Log in now\" type=\"submit\" />\n      </Form>\n   );\n};\n\n\n// Wrap our form with the using withFormik HoC\nconst LoginForm = withFormik({\n   // Transform outer props into form values\n   mapPropsToValues: props => ({ email: '', password: '' }),\n\n   // Add a custom validation function (this can be async too!)\n   validationSchema: Yup.object().shape({\n      email: Yup.string()\n         .required('Email is required')\n         .email('This is not a valid email'),\n      password: Yup.string()\n         .required('Password is required')\n         .min(6, 'Your password has to be at least 6 characters')\n   }),\n\n   // Submission handler\n   handleSubmit: (values, { props, setStatus }) => {\n      props.onLoginSubmit(values.email, values.password);\n   }\n})(InnerForm);\n\nexport default LoginForm;\n\n\n"]},"metadata":{},"sourceType":"module"}