{"ast":null,"code":"import * as actionTypes from '../Actions/actionTypes';\nconst initialState = {\n  data: [],\n  status: true\n};\n\nconst cards = (state = initialState, action) => {\n  let data;\n  let foundCard;\n\n  switch (action.type) {\n    case actionTypes.FETCH_CARDS:\n      return { ...state,\n        data: [...action.data],\n        status: true\n      };\n\n    case actionTypes.FETCH_CARDS_STATUS:\n      return { ...state,\n        status: action.status\n      };\n\n    case actionTypes.CARD_CHANGE_PIN:\n      data = state.data;\n      foundCard = data.find(card => card._id === action.id);\n      foundCard.pin = action.newPin;\n      return { ...state,\n        data: [...data]\n      };\n\n    case actionTypes.CARD_CHANGE_LIMITS:\n      data = state.data;\n      foundCard = data.find(card => card._id === action.id);\n      const newOnlineLimit = action.dailyOnlineLimit;\n      const newWithdrawalLimit = action.dailyWithdrawalLimit;\n\n      if (newOnlineLimit) {\n        foundCard.dailyOnlineLimit = parseFloat(newOnlineLimit).toFixed(2);\n      }\n\n      if (newWithdrawalLimit) {\n        foundCard.dailyWithdrawalLimit = parseFloat(newWithdrawalLimit).toFixed(2);\n      }\n\n      return { ...state,\n        data: [...data]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default cards;","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Reducers/cards.js"],"names":["actionTypes","initialState","data","status","cards","state","action","foundCard","type","FETCH_CARDS","FETCH_CARDS_STATUS","CARD_CHANGE_PIN","find","card","_id","id","pin","newPin","CARD_CHANGE_LIMITS","newOnlineLimit","dailyOnlineLimit","newWithdrawalLimit","dailyWithdrawalLimit","parseFloat","toFixed"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AAEA,MAAMC,YAAY,GAAG;AAClBC,EAAAA,IAAI,EAAE,EADY;AAElBC,EAAAA,MAAM,EAAE;AAFU,CAArB;;AAKA,MAAMC,KAAK,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAC7C,MAAIJ,IAAJ;AACA,MAAIK,SAAJ;;AAEA,UAAQD,MAAM,CAACE,IAAf;AACG,SAAKR,WAAW,CAACS,WAAjB;AACG,aAAO,EACJ,GAAGJ,KADC;AAEJH,QAAAA,IAAI,EAAE,CAAC,GAAGI,MAAM,CAACJ,IAAX,CAFF;AAGJC,QAAAA,MAAM,EAAE;AAHJ,OAAP;;AAMH,SAAKH,WAAW,CAACU,kBAAjB;AACG,aAAO,EACJ,GAAGL,KADC;AAEJF,QAAAA,MAAM,EAAEG,MAAM,CAACH;AAFX,OAAP;;AAKH,SAAKH,WAAW,CAACW,eAAjB;AACGT,MAAAA,IAAI,GAAGG,KAAK,CAACH,IAAb;AACAK,MAAAA,SAAS,GAAGL,IAAI,CAACU,IAAL,CAAUC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaR,MAAM,CAACS,EAAtC,CAAZ;AAEAR,MAAAA,SAAS,CAACS,GAAV,GAAgBV,MAAM,CAACW,MAAvB;AAEA,aAAO,EACJ,GAAGZ,KADC;AAEJH,QAAAA,IAAI,EAAE,CAAC,GAAGA,IAAJ;AAFF,OAAP;;AAKH,SAAKF,WAAW,CAACkB,kBAAjB;AACGhB,MAAAA,IAAI,GAAGG,KAAK,CAACH,IAAb;AACAK,MAAAA,SAAS,GAAGL,IAAI,CAACU,IAAL,CAAUC,IAAI,IAAIA,IAAI,CAACC,GAAL,KAAaR,MAAM,CAACS,EAAtC,CAAZ;AAEA,YAAMI,cAAc,GAAGb,MAAM,CAACc,gBAA9B;AACA,YAAMC,kBAAkB,GAAGf,MAAM,CAACgB,oBAAlC;;AAEA,UAAIH,cAAJ,EAAoB;AACjBZ,QAAAA,SAAS,CAACa,gBAAV,GAA6BG,UAAU,CAACJ,cAAD,CAAV,CAA2BK,OAA3B,CAAmC,CAAnC,CAA7B;AACF;;AAED,UAAIH,kBAAJ,EAAwB;AACrBd,QAAAA,SAAS,CAACe,oBAAV,GAAiCC,UAAU,CAACF,kBAAD,CAAV,CAA+BG,OAA/B,CAAuC,CAAvC,CAAjC;AACF;;AAED,aAAO,EACJ,GAAGnB,KADC;AAEJH,QAAAA,IAAI,EAAE,CAAC,GAAGA,IAAJ;AAFF,OAAP;;AAKH;AACG,aAAOG,KAAP;AA9CN;AAgDF,CApDD;;AAsDA,eAAeD,KAAf","sourcesContent":["import * as actionTypes from '../Actions/actionTypes';\n\nconst initialState = {\n   data: [],\n   status: true\n};\n\nconst cards = (state = initialState, action) => {\n   let data;\n   let foundCard;\n\n   switch (action.type) {\n      case actionTypes.FETCH_CARDS:\n         return {\n            ...state,\n            data: [...action.data],\n            status: true\n         };\n\n      case actionTypes.FETCH_CARDS_STATUS:\n         return {\n            ...state,\n            status: action.status\n         };\n\n      case actionTypes.CARD_CHANGE_PIN:\n         data = state.data;\n         foundCard = data.find(card => card._id === action.id);\n\n         foundCard.pin = action.newPin;\n\n         return {\n            ...state,\n            data: [...data]\n         };\n\n      case actionTypes.CARD_CHANGE_LIMITS:\n         data = state.data;\n         foundCard = data.find(card => card._id === action.id);\n\n         const newOnlineLimit = action.dailyOnlineLimit;\n         const newWithdrawalLimit = action.dailyWithdrawalLimit;\n\n         if (newOnlineLimit) {\n            foundCard.dailyOnlineLimit = parseFloat(newOnlineLimit).toFixed(2);\n         }\n\n         if (newWithdrawalLimit) {\n            foundCard.dailyWithdrawalLimit = parseFloat(newWithdrawalLimit).toFixed(2);\n         }\n\n         return {\n            ...state,\n            data: [...data]\n         };\n\n      default:\n         return state;\n   }\n};\n\nexport default cards;\n"]},"metadata":{},"sourceType":"module"}