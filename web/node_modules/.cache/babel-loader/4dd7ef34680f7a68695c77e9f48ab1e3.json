{"ast":null,"code":"import _ from 'lodash';\nimport { getMyCards, changePin, changeLimits } from 'api/cards';\nimport * as actionTypes from './actionTypes'; // Get all user's cards\n\nexport const fetchCards = () => async dispatch => {\n  try {\n    const data = await getMyCards();\n\n    if (!data) {\n      dispatch(fetchCardsStatus(false));\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.FETCH_CARDS,\n      data\n    });\n  } catch (err) {\n    dispatch(fetchCardsStatus(false));\n  }\n};\nexport const fetchCardsStatus = status => ({\n  type: actionTypes.FETCH_CARDS_STATUS,\n  status\n}); // Change card's PIN\n\nexport const changeCardPin = (id, newPin) => async dispatch => {\n  try {\n    const card = await changePin(id, newPin);\n\n    if (!card) {\n      return;\n    }\n\n    dispatch({\n      type: actionTypes.CARD_CHANGE_PIN,\n      id,\n      newPin\n    });\n  } catch (err) {}\n}; // Change card's limits\n\nexport const changeCardLimits = (id, newOnlineLimit, newWithdrawalLimit) => async dispatch => {\n  try {\n    const limits = {};\n\n    if (newOnlineLimit) {\n      limits.dailyOnlineLimit = parseFloat(newOnlineLimit).toFixed(2);\n    }\n\n    if (newWithdrawalLimit) {\n      limits.dailyWithdrawalLimit = parseFloat(newWithdrawalLimit).toFixed(2);\n    }\n\n    if (!_.isEmpty(limits)) {\n      const card = await changeLimits(id, { ...limits\n      });\n\n      if (!card) {\n        return;\n      }\n\n      dispatch({\n        type: actionTypes.CARD_CHANGE_LIMITS,\n        id,\n        ...limits\n      });\n    }\n  } catch (err) {}\n};","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Actions/cards.js"],"names":["_","getMyCards","changePin","changeLimits","actionTypes","fetchCards","dispatch","data","fetchCardsStatus","type","FETCH_CARDS","err","status","FETCH_CARDS_STATUS","changeCardPin","id","newPin","card","CARD_CHANGE_PIN","changeCardLimits","newOnlineLimit","newWithdrawalLimit","limits","dailyOnlineLimit","parseFloat","toFixed","dailyWithdrawalLimit","isEmpty","CARD_CHANGE_LIMITS"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,WAApD;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B,C,CAEA;;AACA,OAAO,MAAMC,UAAU,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC/C,MAAI;AACD,UAAMC,IAAI,GAAG,MAAMN,UAAU,EAA7B;;AAEA,QAAI,CAACM,IAAL,EAAW;AACRD,MAAAA,QAAQ,CAACE,gBAAgB,CAAC,KAAD,CAAjB,CAAR;AACA;AACF;;AAEDF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEL,WAAW,CAACM,WAApB;AAAiCH,MAAAA;AAAjC,KAAD,CAAR;AACF,GATD,CASE,OAAOI,GAAP,EAAY;AACXL,IAAAA,QAAQ,CAACE,gBAAgB,CAAC,KAAD,CAAjB,CAAR;AACF;AACH,CAbM;AAeP,OAAO,MAAMA,gBAAgB,GAAGI,MAAM,KAAK;AACxCH,EAAAA,IAAI,EAAEL,WAAW,CAACS,kBADsB;AAExCD,EAAAA;AAFwC,CAAL,CAA/B,C,CAKP;;AACA,OAAO,MAAME,aAAa,GAAG,CAACC,EAAD,EAAKC,MAAL,KAAgB,MAAMV,QAAN,IAAkB;AAC5D,MAAI;AACD,UAAMW,IAAI,GAAG,MAAMf,SAAS,CAACa,EAAD,EAAKC,MAAL,CAA5B;;AAEA,QAAI,CAACC,IAAL,EAAW;AACR;AACF;;AAEDX,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEL,WAAW,CAACc,eAApB;AAAqCH,MAAAA,EAArC;AAAyCC,MAAAA;AAAzC,KAAD,CAAR;AACF,GARD,CAQE,OAAOL,GAAP,EAAY,CAAE;AAClB,CAVM,C,CAYP;;AACA,OAAO,MAAMQ,gBAAgB,GAAG,CAACJ,EAAD,EAAKK,cAAL,EAAqBC,kBAArB,KAA4C,MAAMf,QAAN,IAAkB;AAC3F,MAAI;AACD,UAAMgB,MAAM,GAAG,EAAf;;AAEA,QAAIF,cAAJ,EAAoB;AACjBE,MAAAA,MAAM,CAACC,gBAAP,GAA0BC,UAAU,CAACJ,cAAD,CAAV,CAA2BK,OAA3B,CAAmC,CAAnC,CAA1B;AACF;;AAED,QAAIJ,kBAAJ,EAAwB;AACrBC,MAAAA,MAAM,CAACI,oBAAP,GAA8BF,UAAU,CAACH,kBAAD,CAAV,CAA+BI,OAA/B,CAAuC,CAAvC,CAA9B;AACF;;AAED,QAAI,CAACzB,CAAC,CAAC2B,OAAF,CAAUL,MAAV,CAAL,EAAwB;AACrB,YAAML,IAAI,GAAG,MAAMd,YAAY,CAACY,EAAD,EAAK,EAAE,GAAGO;AAAL,OAAL,CAA/B;;AAEA,UAAI,CAACL,IAAL,EAAW;AACR;AACF;;AAEDX,MAAAA,QAAQ,CAAC;AACNG,QAAAA,IAAI,EAAEL,WAAW,CAACwB,kBADZ;AAENb,QAAAA,EAFM;AAGN,WAAGO;AAHG,OAAD,CAAR;AAKF;AACH,GAxBD,CAwBE,OAAOX,GAAP,EAAY,CAAE;AAClB,CA1BM","sourcesContent":["import _ from 'lodash';\nimport { getMyCards, changePin, changeLimits } from 'api/cards';\nimport * as actionTypes from './actionTypes';\n\n// Get all user's cards\nexport const fetchCards = () => async dispatch => {\n   try {\n      const data = await getMyCards();\n\n      if (!data) {\n         dispatch(fetchCardsStatus(false));\n         return;\n      }\n\n      dispatch({ type: actionTypes.FETCH_CARDS, data });\n   } catch (err) {\n      dispatch(fetchCardsStatus(false));\n   }\n};\n\nexport const fetchCardsStatus = status => ({\n   type: actionTypes.FETCH_CARDS_STATUS,\n   status\n});\n\n// Change card's PIN\nexport const changeCardPin = (id, newPin) => async dispatch => {\n   try {\n      const card = await changePin(id, newPin);\n\n      if (!card) {\n         return;\n      }\n\n      dispatch({ type: actionTypes.CARD_CHANGE_PIN, id, newPin });\n   } catch (err) {}\n};\n\n// Change card's limits\nexport const changeCardLimits = (id, newOnlineLimit, newWithdrawalLimit) => async dispatch => {\n   try {\n      const limits = {};\n\n      if (newOnlineLimit) {\n         limits.dailyOnlineLimit = parseFloat(newOnlineLimit).toFixed(2);\n      }\n\n      if (newWithdrawalLimit) {\n         limits.dailyWithdrawalLimit = parseFloat(newWithdrawalLimit).toFixed(2);\n      }\n\n      if (!_.isEmpty(limits)) {\n         const card = await changeLimits(id, { ...limits });\n\n         if (!card) {\n            return;\n         }\n\n         dispatch({\n            type: actionTypes.CARD_CHANGE_LIMITS,\n            id,\n            ...limits\n         });\n      }\n   } catch (err) {}\n};\n"]},"metadata":{},"sourceType":"module"}