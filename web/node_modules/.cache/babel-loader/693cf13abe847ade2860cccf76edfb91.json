{"ast":null,"code":"// Token checker\nexport const getAuthToken = () => {\n  return localStorage.getItem('token');\n};\nexport const setAuthToken = token => {\n  localStorage.setItem('token', token);\n};\nexport const removeAuthToken = () => {\n  localStorage.removeItem('token');\n};\nexport const isValidToken = () => {\n  return new Promise((resolve, reject) => {\n    // Check if token is present\n    const currentTime = Date.now().valueOf() / 1000;\n    const token = getAuthToken();\n\n    if (!token) {\n      reject();\n      return;\n    }\n\n    const decodedToken = jwtDecode(token); // If token expired - remove it\n\n    if (decodedToken.exp < currentTime) {\n      removeAuthToken();\n      reject();\n      return;\n    }\n\n    resolve(token);\n  });\n};","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/utils/tools.js"],"names":["getAuthToken","localStorage","getItem","setAuthToken","token","setItem","removeAuthToken","removeItem","isValidToken","Promise","resolve","reject","currentTime","Date","now","valueOf","decodedToken","jwtDecode","exp"],"mappings":"AAAA;AACA,OAAO,MAAMA,YAAY,GAAG,MAAM;AAC9B,SAAOC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAP;AACF,CAFK;AAIN,OAAO,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAClCH,EAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BD,KAA9B;AACF,CAFM;AAIP,OAAO,MAAME,eAAe,GAAG,MAAM;AAClCL,EAAAA,YAAY,CAACM,UAAb,CAAwB,OAAxB;AACF,CAFM;AAIP,OAAO,MAAMC,YAAY,GAAG,MAAM;AAC/B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrC;AACA,UAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,GAAWC,OAAX,KAAuB,IAA3C;AACA,UAAMX,KAAK,GAAGJ,YAAY,EAA1B;;AAEA,QAAI,CAACI,KAAL,EAAY;AACTO,MAAAA,MAAM;AACN;AACF;;AAED,UAAMK,YAAY,GAAGC,SAAS,CAACb,KAAD,CAA9B,CAVqC,CAYrC;;AACA,QAAIY,YAAY,CAACE,GAAb,GAAmBN,WAAvB,EAAoC;AACjCN,MAAAA,eAAe;AAEfK,MAAAA,MAAM;AACN;AACF;;AAEDD,IAAAA,OAAO,CAACN,KAAD,CAAP;AACF,GArBM,CAAP;AAsBF,CAvBM","sourcesContent":["// Token checker\nexport const getAuthToken = () => {\n    return localStorage.getItem('token');\n };\n \n export const setAuthToken = token => {\n    localStorage.setItem('token', token);\n };\n \n export const removeAuthToken = () => {\n    localStorage.removeItem('token');\n };\n \n export const isValidToken = () => {\n    return new Promise((resolve, reject) => {\n       // Check if token is present\n       const currentTime = Date.now().valueOf() / 1000;\n       const token = getAuthToken();\n \n       if (!token) {\n          reject();\n          return;\n       }\n \n       const decodedToken = jwtDecode(token);\n \n       // If token expired - remove it\n       if (decodedToken.exp < currentTime) {\n          removeAuthToken();\n \n          reject();\n          return;\n       }\n \n       resolve(token);\n    });\n };\n "]},"metadata":{},"sourceType":"module"}