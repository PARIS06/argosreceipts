{"ast":null,"code":"var _jsxFileName = \"/Users/moabdo-business/Desktop/argoswebapp/web/src/Containers/Authorization/Register/index.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as Actions from '../../../Store/Actions';\nimport withAuth from '../../../Hoc/WithAuth';\nimport Input from '../../../Components/UI/FormBoxes/Input/Input';\nimport RegisterBox from '../../../Components/Authorization/Register';\n\nclass Register extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        firstName: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Enter your first name'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 255\n          },\n          valid: false,\n          touched: false\n        },\n        lastName: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Enter your last name'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 255\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Enter your email address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Enter your password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      loading: false,\n      error: null\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidation(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.onRegisterSubmit = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true,\n        error: null\n      }); // Dispatch auth action\n      // There will be automatic redirect to panel, in HOC\n\n      this.props.register(this.state.controls.email.value, this.state.controls.password, this.state.controls.firstName.value, this.state.controls.lastName.value).catch(error => this.setState({\n        loading: false,\n        error\n      }));\n    };\n  }\n\n  checkValidation(value, rules) {\n    let isValid = true;\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    const form = formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      invalid: !formElement.config.valid,\n      touched: formElement.config.touched,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(RegisterBox, {\n      history: this.props.history,\n      onRegisterSubmit: this.onRegisterSubmit,\n      loading: this.state.loading,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.onRegisterSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, form))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    register: (firstName, lastName, email, password, user_type) => dispatch(Actions.register(firstName, lastName, email, password, user_type))\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(withAuth(Register));","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Containers/Authorization/Register/index.js"],"names":["React","Component","connect","Actions","withAuth","Input","RegisterBox","Register","state","controls","firstName","elementType","elementConfig","type","placeholder","value","validation","required","minLength","maxLength","valid","touched","lastName","email","isEmail","password","loading","error","inputChangedHandler","event","controlName","updatedControls","target","checkValidation","setState","onRegisterSubmit","preventDefault","props","register","catch","rules","isValid","trim","length","pattern","test","isNumeric","render","formElementsArray","key","push","id","config","form","map","formElement","history","mapDispatchToProps","dispatch","user_type"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as Actions from '../../../Store/Actions';\nimport withAuth from '../../../Hoc/WithAuth';\nimport Input from '../../../Components/UI/FormBoxes/Input/Input';\n\nimport RegisterBox from '../../../Components/Authorization/Register';\n\nclass Register extends Component {\n   state = {\n      controls: {\n         firstName: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Enter your first name'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 5,\n                maxLength: 255\n            },\n            valid: false,\n            touched: false\n        },\n        lastName: {\n            elementType: 'input',\n            elementConfig: {\n               type: 'text',\n               placeholder: 'Enter your last name'\n            },\n            value: '',\n            validation: {\n               required: true,\n               minLength: 5,\n               maxLength: 255\n            },\n            valid: false,\n            touched: false\n         },\n         email: {\n            elementType: 'input',\n            elementConfig: {\n               type: 'email',\n               placeholder: 'Enter your email address'\n            },\n            value: '',\n            validation: {\n               required: true,\n               isEmail: true\n            },\n            valid: false,\n            touched: false\n         },\n         password: {\n            elementType: 'input',\n            elementConfig: {\n               type: 'password',\n               placeholder: 'Enter your password'\n            },\n            value: '',\n            validation: {\n               required: true,\n               minLength: 6\n            },\n            valid: false,\n            touched: false\n         },\n      },\n      loading: false,\n      error: null\n   };\n\n\n  checkValidation(value, rules) {\n      let isValid = true;\n      if (rules.required) {\n          isValid = value.trim() !=='' && isValid;\n      }\n      if (rules.minLength) {\n          isValid = value.length >= rules.minLength && isValid\n      }\n      if (rules.maxLength) {\n          isValid = value.length <= rules.maxLength && isValid\n      }\n      if (rules.isEmail) {\n         const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n         isValid = pattern.test(value) && isValid\n      }\n     if (rules.isNumeric) {\n         const pattern = /^\\d+$/;\n         isValid = pattern.test(value) && isValid\n      }\n      return isValid;\n  }\n\n  inputChangedHandler = (event, controlName) => {\n      const updatedControls = {\n         ...this.state.controls,\n         [controlName]: {\n            ...this.state.controls[controlName],\n            value: event.target.value,\n            valid: this.checkValidation(event.target.value, this.state.controls[controlName].validation),\n            touched: true\n         }\n      };\n      this.setState({controls: updatedControls});\n  }\n\n   render() {\n      const formElementsArray = []\n      for (let key in this.state.controls) {\n          formElementsArray.push({\n              id: key,\n              config: this.state.controls[key]\n          });\n      }\n\n      const form = formElementsArray.map(formElement => (\n         <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value} \n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\n            invalid={!formElement.config.valid}\n            touched={formElement.config.touched}\n         />\n      ));\n      \n      return (\n         <div className=\"row\">\n            <div className=\"col\">\n               <RegisterBox\n                  history={this.props.history}\n                  onRegisterSubmit={this.onRegisterSubmit}\n                  loading={this.state.loading}\n                  error={this.state.error}\n               > \n                  <form onSubmit={this.onRegisterSubmit}>\n                     {form}\n                  </form>\n               </RegisterBox>\n              \n            </div>\n         </div>\n      );\n   }\n\n   onRegisterSubmit = (event) => {\n      event.preventDefault();\n      this.setState({ loading: true, error: null });\n\n      // Dispatch auth action\n      // There will be automatic redirect to panel, in HOC\n      this.props\n         .register(this.state.controls.email.value, this.state.controls.password, this.state.controls.firstName.value, this.state.controls.lastName.value)\n         .catch(error => this.setState({ loading: false, error }));\n   };\n}\n\nconst mapDispatchToProps = dispatch => {\n   return {\n      register: (firstName, lastName, email, password, user_type) => dispatch(Actions.register(firstName, lastName, email, password, user_type))\n   };\n};\n\nexport default connect(null, mapDispatchToProps)(withAuth(Register));\n"]},"metadata":{},"sourceType":"module"}