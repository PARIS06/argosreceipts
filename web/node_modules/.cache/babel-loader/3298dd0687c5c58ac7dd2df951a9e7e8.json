{"ast":null,"code":"import * as actionTypes from '../Actions/actionTypes';\nconst initialState = {\n  data: [],\n  status: true\n};\n\nconst messages = (state = initialState, action) => {\n  let data;\n\n  switch (action.type) {\n    case actionTypes.FETCH_MESSAGES:\n      return { ...state,\n        data: [...action.data],\n        status: true\n      };\n\n    case actionTypes.FETCH_MESSAGES_STATUS:\n      return { ...state,\n        status: action.status\n      };\n\n    case actionTypes.MESSAGE_TOGGLE:\n      data = state.data;\n      const foundMsg = data.find(msg => msg._id === action.id);\n      foundMsg.isRead = !foundMsg.isRead;\n      return { ...state,\n        data: [...data]\n      };\n\n    case actionTypes.MESSAGE_REMOVE:\n      data = state.data.filter(msg => msg._id !== action.id);\n      return { ...state,\n        data: [...data]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default messages;","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Store/Reducers/messages.js"],"names":["actionTypes","initialState","data","status","messages","state","action","type","FETCH_MESSAGES","FETCH_MESSAGES_STATUS","MESSAGE_TOGGLE","foundMsg","find","msg","_id","id","isRead","MESSAGE_REMOVE","filter"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AAEA,MAAMC,YAAY,GAAG;AAClBC,EAAAA,IAAI,EAAE,EADY;AAElBC,EAAAA,MAAM,EAAE;AAFU,CAArB;;AAKA,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAChD,MAAIJ,IAAJ;;AAEA,UAAQI,MAAM,CAACC,IAAf;AACG,SAAKP,WAAW,CAACQ,cAAjB;AACG,aAAO,EACJ,GAAGH,KADC;AAEJH,QAAAA,IAAI,EAAE,CAAC,GAAGI,MAAM,CAACJ,IAAX,CAFF;AAGJC,QAAAA,MAAM,EAAE;AAHJ,OAAP;;AAMH,SAAKH,WAAW,CAACS,qBAAjB;AACG,aAAO,EACJ,GAAGJ,KADC;AAEJF,QAAAA,MAAM,EAAEG,MAAM,CAACH;AAFX,OAAP;;AAKH,SAAKH,WAAW,CAACU,cAAjB;AACGR,MAAAA,IAAI,GAAGG,KAAK,CAACH,IAAb;AACA,YAAMS,QAAQ,GAAGT,IAAI,CAACU,IAAL,CAAUC,GAAG,IAAIA,GAAG,CAACC,GAAJ,KAAYR,MAAM,CAACS,EAApC,CAAjB;AAEAJ,MAAAA,QAAQ,CAACK,MAAT,GAAkB,CAACL,QAAQ,CAACK,MAA5B;AAEA,aAAO,EACJ,GAAGX,KADC;AAEJH,QAAAA,IAAI,EAAE,CAAC,GAAGA,IAAJ;AAFF,OAAP;;AAKH,SAAKF,WAAW,CAACiB,cAAjB;AACGf,MAAAA,IAAI,GAAGG,KAAK,CAACH,IAAN,CAAWgB,MAAX,CAAkBL,GAAG,IAAIA,GAAG,CAACC,GAAJ,KAAYR,MAAM,CAACS,EAA5C,CAAP;AAEA,aAAO,EACJ,GAAGV,KADC;AAEJH,QAAAA,IAAI,EAAE,CAAC,GAAGA,IAAJ;AAFF,OAAP;;AAKH;AACG,aAAOG,KAAP;AAlCN;AAoCF,CAvCD;;AAyCA,eAAeD,QAAf","sourcesContent":["import * as actionTypes from '../Actions/actionTypes';\n\nconst initialState = {\n   data: [],\n   status: true\n};\n\nconst messages = (state = initialState, action) => {\n   let data;\n\n   switch (action.type) {\n      case actionTypes.FETCH_MESSAGES:\n         return {\n            ...state,\n            data: [...action.data],\n            status: true\n         };\n\n      case actionTypes.FETCH_MESSAGES_STATUS:\n         return {\n            ...state,\n            status: action.status\n         };\n\n      case actionTypes.MESSAGE_TOGGLE:\n         data = state.data;\n         const foundMsg = data.find(msg => msg._id === action.id);\n\n         foundMsg.isRead = !foundMsg.isRead;\n\n         return {\n            ...state,\n            data: [...data]\n         };\n\n      case actionTypes.MESSAGE_REMOVE:\n         data = state.data.filter(msg => msg._id !== action.id);\n\n         return {\n            ...state,\n            data: [...data]\n         };\n\n      default:\n         return state;\n   }\n};\n\nexport default messages;\n"]},"metadata":{},"sourceType":"module"}