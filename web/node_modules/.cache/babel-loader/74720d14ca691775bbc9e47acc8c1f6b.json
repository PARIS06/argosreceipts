{"ast":null,"code":"// import React from 'react';\n// import { Form, Field, withFormik } from 'formik';\n// import SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\n// import validations from './validations';\n// const InnerForm = props => {\n//    const { errors, touched } = props;\n//    return (\n//       <Form>\n//          <div>\n//             <div className=\"form-group\">\n//                <label htmlFor=\"source-account\">Choose your account</label>\n//                <Field\n//                   component=\"select\"\n//                   className=\"form-control\"\n//                   id=\"source-account\"\n//                   name=\"sourceAccountId\"\n//                   placeholder=\"Your new email...\"\n//                >\n//                   {props.userAccountsList}\n//                </Field>\n//                {touched.sourceAccountId && errors.sourceAccountId && (\n//                   <p>{errors.sourceAccountId}</p>\n//                )}\n//             </div>\n//             <div className=\"form-group\">\n//                <label htmlFor=\"payee-acc-number\">Recipient's account number</label>\n//                <Field\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   id=\"payee-acc-number\"\n//                   name=\"payeeAccNumber\"\n//                   maxLength=\"8\"\n//                   placeholder=\"Recipient's account number...\"\n//                />\n//                {touched.payeeAccNumber && errors.payeeAccNumber && (\n//                   <p className=\"field-invalid\">{errors.payeeAccNumber}</p>\n//                )}\n//             </div>\n//             <div className=\"form-group\">\n//                <label htmlFor=\"payee-sort-code\">Recipient's sort code</label>\n//                <Field\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   id=\"payee-sort-code\"\n//                   name=\"payeeSortcode\"\n//                   maxLength=\"6\"\n//                   placeholder=\"Recipient's sort code...\"\n//                />\n//                {touched.payeeSortcode && errors.payeeSortcode && (\n//                   <p className=\"field-invalid\">{errors.payeeSortcode}</p>\n//                )}\n//             </div>\n//             <div className=\"form-group\">\n//                <label htmlFor=\"payee-name\">Recipient's name</label>\n//                <Field\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   id=\"payee-name\"\n//                   name=\"payeeName\"\n//                   placeholder=\"Recipient's name...\"\n//                />\n//                {touched.payeeName && errors.payeeName && (\n//                   <p className=\"field-invalid\">{errors.payeeName}</p>\n//                )}\n//             </div>\n//             <div className=\"form-group\">\n//                <label htmlFor=\"payee-address\">Recipient's address</label>\n//                <Field\n//                   component=\"textarea\"\n//                   className=\"form-control\"\n//                   id=\"payee-address\"\n//                   name=\"payeeAddress\"\n//                   rows=\"4\"\n//                   placeholder=\"Recipient's address...\"\n//                />\n//                {touched.payeeAddress && errors.payeeAddress && (\n//                   <p className=\"field-invalid\">{errors.payeeAddress}</p>\n//                )}\n//             </div>\n//             <div className=\"form-group\">\n//                <label htmlFor=\"reference\">Reference</label>\n//                <Field\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   id=\"reference\"\n//                   name=\"reference\"\n//                   maxLength=\"50\"\n//                   placeholder=\"Reference...\"\n//                />\n//                {touched.reference && errors.reference && (\n//                   <p className=\"field-invalid\">{errors.reference}</p>\n//                )}\n//             </div>\n//             <div className=\"form-group\">\n//                <label htmlFor=\"amount\">Amount</label>\n//                <Field\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   id=\"amount\"\n//                   name=\"amount\"\n//                   placeholder=\"Amount...\"\n//                />\n//                {touched.amount && errors.amount && <p className=\"field-invalid\">{errors.amount}</p>}\n//             </div>\n//             <p className=\"validation-info\">{props.status}</p>\n//          </div>\n//          <SingleModuleButton text=\"Confirm transfer\" type=\"submit\" />\n//       </Form>\n//    );\n// };\n// // Wrap our form with the using withFormik HoC\n// const NewTransferForm = withFormik({\n//    // Transform outer props into form values\n//    mapPropsToValues: props => ({\n//       sourceAccountId: props.firstAccId,\n//       payeeAccNumber: '',\n//       payeeSortcode: '',\n//       payeeName: '',\n//       payeeAddress: '',\n//       reference: '',\n//       amount: ''\n//    }),\n//    validationSchema: validations,\n//    // Submission handler\n//    handleSubmit: (values, { props, setStatus }) => {\n//       // Prepare some data for API\n//       const data = {\n//          ...values,\n//          sender: props.userId,\n//          recipient: props.userId\n//       };\n//       setStatus('Sending...');\n//       props\n//          .addTransfer(data)\n//          .then(data => setStatus('Transfer done!'))\n//          .catch(error => setStatus('Problems, try again...'));\n//    }\n// })(InnerForm);\n// export default NewTransferForm;","map":{"version":3,"sources":["/Users/moabdo-business/Desktop/argoswebapp/web/src/Components/Receipts/New/Form.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React from 'react';\n// import { Form, Field, withFormik } from 'formik';\n// import SingleModuleButton from '../../../Components/UI/Buttons/SingleModuleButton';\n// import validations from './validations';\n\n// const InnerForm = props => {\n//    const { errors, touched } = props;\n\n//    return (\n//       <Form>\n//          <div>\n//             <div className=\"form-group\">\n//                <label htmlFor=\"source-account\">Choose your account</label>\n//                <Field\n//                   component=\"select\"\n//                   className=\"form-control\"\n//                   id=\"source-account\"\n//                   name=\"sourceAccountId\"\n//                   placeholder=\"Your new email...\"\n//                >\n//                   {props.userAccountsList}\n//                </Field>\n//                {touched.sourceAccountId && errors.sourceAccountId && (\n//                   <p>{errors.sourceAccountId}</p>\n//                )}\n//             </div>\n\n//             <div className=\"form-group\">\n//                <label htmlFor=\"payee-acc-number\">Recipient's account number</label>\n\n//                <Field\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   id=\"payee-acc-number\"\n//                   name=\"payeeAccNumber\"\n//                   maxLength=\"8\"\n//                   placeholder=\"Recipient's account number...\"\n//                />\n//                {touched.payeeAccNumber && errors.payeeAccNumber && (\n//                   <p className=\"field-invalid\">{errors.payeeAccNumber}</p>\n//                )}\n//             </div>\n\n//             <div className=\"form-group\">\n//                <label htmlFor=\"payee-sort-code\">Recipient's sort code</label>\n\n//                <Field\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   id=\"payee-sort-code\"\n//                   name=\"payeeSortcode\"\n//                   maxLength=\"6\"\n//                   placeholder=\"Recipient's sort code...\"\n//                />\n//                {touched.payeeSortcode && errors.payeeSortcode && (\n//                   <p className=\"field-invalid\">{errors.payeeSortcode}</p>\n//                )}\n//             </div>\n\n//             <div className=\"form-group\">\n//                <label htmlFor=\"payee-name\">Recipient's name</label>\n\n//                <Field\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   id=\"payee-name\"\n//                   name=\"payeeName\"\n//                   placeholder=\"Recipient's name...\"\n//                />\n//                {touched.payeeName && errors.payeeName && (\n//                   <p className=\"field-invalid\">{errors.payeeName}</p>\n//                )}\n//             </div>\n\n//             <div className=\"form-group\">\n//                <label htmlFor=\"payee-address\">Recipient's address</label>\n\n//                <Field\n//                   component=\"textarea\"\n//                   className=\"form-control\"\n//                   id=\"payee-address\"\n//                   name=\"payeeAddress\"\n//                   rows=\"4\"\n//                   placeholder=\"Recipient's address...\"\n//                />\n//                {touched.payeeAddress && errors.payeeAddress && (\n//                   <p className=\"field-invalid\">{errors.payeeAddress}</p>\n//                )}\n//             </div>\n\n//             <div className=\"form-group\">\n//                <label htmlFor=\"reference\">Reference</label>\n\n//                <Field\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   id=\"reference\"\n//                   name=\"reference\"\n//                   maxLength=\"50\"\n//                   placeholder=\"Reference...\"\n//                />\n//                {touched.reference && errors.reference && (\n//                   <p className=\"field-invalid\">{errors.reference}</p>\n//                )}\n//             </div>\n\n//             <div className=\"form-group\">\n//                <label htmlFor=\"amount\">Amount</label>\n\n//                <Field\n//                   type=\"text\"\n//                   className=\"form-control\"\n//                   id=\"amount\"\n//                   name=\"amount\"\n//                   placeholder=\"Amount...\"\n//                />\n//                {touched.amount && errors.amount && <p className=\"field-invalid\">{errors.amount}</p>}\n//             </div>\n\n//             <p className=\"validation-info\">{props.status}</p>\n//          </div>\n\n//          <SingleModuleButton text=\"Confirm transfer\" type=\"submit\" />\n//       </Form>\n//    );\n// };\n\n// // Wrap our form with the using withFormik HoC\n// const NewTransferForm = withFormik({\n//    // Transform outer props into form values\n//    mapPropsToValues: props => ({\n//       sourceAccountId: props.firstAccId,\n//       payeeAccNumber: '',\n//       payeeSortcode: '',\n//       payeeName: '',\n//       payeeAddress: '',\n//       reference: '',\n//       amount: ''\n//    }),\n\n//    validationSchema: validations,\n\n//    // Submission handler\n//    handleSubmit: (values, { props, setStatus }) => {\n//       // Prepare some data for API\n//       const data = {\n//          ...values,\n//          sender: props.userId,\n//          recipient: props.userId\n//       };\n\n//       setStatus('Sending...');\n\n//       props\n//          .addTransfer(data)\n//          .then(data => setStatus('Transfer done!'))\n//          .catch(error => setStatus('Problems, try again...'));\n//    }\n// })(InnerForm);\n\n// export default NewTransferForm;\n"]},"metadata":{},"sourceType":"module"}